#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nstruct BOM {\n\tint is_BOM;\n\tint length;\n\tint type;\n\tchar * type_as_string;\n\tchar * BOM;\n}\n\nint matches(char * BOM_, char * string_, int length_) {\n\tchar * b = BOM_+1;\n\tfor(int i = 0; i < length_; i++) {\n\t\tif (string_[i] == b[i]) matches = 1;\n\t\telse {\n\t\t\tmatches = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn matches;\n}\n\n#define ifbom(bom_struct, is_BOM_, length_, type_, type_as_string_, BOM_, string_) if (matches(BOM_, string_, length_)) { \\\n\tbom_struct.is_BOM = is_BOM_; \\\n\tbom_struct.length = length_; \\\n\tbom_struct.type = type_; \\\n\tbom_struct.type_as_string = type_as_string_; \\\n\tbom_struct.BOM = BOM_+1 /* remove the ^ at the start */ ; \\\n}\n\n#define elifbom(bom_struct, is_BOM_, length_, type_, type_as_string_, BOM_, string_) else ifbom(bom_struct, is_BOM_, length_, type_, type_as_string_, BOM_, string_)\n\n#define elbom(bom_struct, is_BOM_, length_, type_, type_as_string_, BOM_) else { \\\n\tbom_struct.is_BOM = is_BOM_; \\\n\tbom_struct.length = length_; \\\n\tbom_struct.type = type_; \\\n\tbom_struct.type_as_string = type_as_string_; \\\n\tbom_struct.BOM = BOM_; \\\n}\n\n#define cat 0\n#define hex 1\n#define both 2\n#define json 3\n\nint mode;\n\nvoid __hexdump(unsigned char *buffer, unsigned long index, unsigned long width)\n{\n\tunsigned long i;\n\tif (mode == both || mode == hex) {\n\tfor (i = 0; i < index; i++)\n\t\tprintf(\"%02x \", buffer[i]);\n\t}\n\tif (mode == both) {\n\tfor (unsigned long spacer = index; spacer < width; spacer++)\n\t\tprintf(\"\\t\");\n\tprintf(\": \");\n\t}\n\tif (mode == cat || mode == both || mode == json) {\n\tfor (i = 0; i < index; i++)\n\t{\n\t\tif (buffer[i] < 32 || buffer[i] >= 127)\n\t\t\tprintf(\".\");\n\t\telse\n\t\t\tprintf(\"%c\", buffer[i]);\n\t}\n\t}\n\tprintf(\"\\n\");\n}\n\nint __hexdump_string(char *infile, unsigned long start, unsigned long stop, unsigned long width)\n{\n\tchar ch;\n\tunsigned long f_index = 0;\n\tunsigned long bb_index = 0;\n\tunsigned char *byte_buffer = malloc(width);\n\tif (byte_buffer == NULL)\n\t{\n\t\tprintf(\"Could not allocate memory for byte_buffer\\n\");\n\t\treturn -1;\n\t}\n\twhile (*infile)\n\t{\n\t\tch = *infile;\n\t\tif ((f_index >= start) && (f_index <= stop))\n\t\t{\n\t\t\tbyte_buffer[bb_index] = ch;\n\t\t\tbb_index++;\n\t\t}\n\t\tif (bb_index >= width)\n\t\t{\n\t\t\t__hexdump(byte_buffer, bb_index, width);\n\t\t\tbb_index = 0;\n\t\t}\n\t\tf_index++;\n\t\tinfile++;\n\t}\n\tif (bb_index)\n\t\t__hexdump(byte_buffer, bb_index, width);\n\tfree(byte_buffer);\n\treturn 0;\n}\n\n#define builtin__BOM_print(bom_struct) { \\\n\tprintf(\"%s.is_BOM = %s\\n%s.length = %d\\n%s.type = %d\\n%s.type_as_string = %s\\n%s.BOM = \", #bom_struct, bom_struct.is_BOM?\"yes\":\"no\", #bom_struct, bom_struct.length, #bom_struct, bom_struct.type, #bom_struct,bom_struct.type_as_string, #bom_struct); \\\n\tmode = both; \\\n\t__hexdump_string(bom_struct.BOM, 0, bom_struct.length, 5); \\\n}\n\n\nstruct BOM builtin__BOM_get(char * string) {\n\tstruct BOM bom;\n\tifbom(bom, true, 3, 1, \"UTF-8\", \"^\\xef\\xbb\\xbf\", string)\n\telifbom(bom, true, 2, 2, \"UTF-16 (BE)\", \"^\\xfe\\xff\", string)\n\telifbom(bom, true, 2, 3, \"UTF-16 (LE)\", \"^\\xff\\xfe\", string)\n\telifbom(bom, true, 4, 4, \"UTF-32 (BE)\", \"^\\x00\\x00\\xfe\\xff\", string)\n\telifbom(bom, true, 4, 5, \"UTF-32 (LE)\", \"^\\xff\\xfe\\x00\\x00\", string)\n\telifbom(bom, true, 5, 6, \"UTF-7\", \"^\\x2b\\x2f\\x76\\x38\\x3d\", string)\n\telifbom(bom, true, 4, 7, \"UTF-7\", \"^\\x2b\\x2f\\x76\\x38\", string)\n\telifbom(bom, true, 4, 8, \"UTF-7\", \"^\\x2b\\x2f\\x76\\x39\", string)\n\telifbom(bom, true, 4, 9, \"UTF-7\", \"^\\x2b\\x2f\\x76\\x2b\", string)\n\telifbom(bom, true, 4, 10, \"UTF-7\", \"^\\x2b\\x2f\\x76\\x2f\", string)\n\telifbom(bom, true, 3, 11, \"UTF-1\", \"^\\xf7\\x64\\x4c\", string)\n\telifbom(bom, true, 4, 12, \"UTF-EBCDIC\", \"^\\xdd\\x73\\x66\\x73\", string)\n\telifbom(bom, true, 3, 13, \"SCSU\", \"^\\x0e\\xfe\\xff\", string)\n\telifbom(bom, true, 3, 14, \"BOCU-1\", \"^\\xfb\\xee\\x28\", string)\n\telifbom(bom, true, 4, 15, \"GB-18030\", \"^\\x84\\x31\\x95\\x33\", string)\n\telbom(bom, false, 0, 0, \"Not present\", \"Not present\")\n\t\n\treturn (struct BOM) bom;\n}\n\nint main()\n{\n\tstruct BOM t = builtin__BOM_get(\"test\");\n\tbuiltin__BOM_print(t);\n\treturn 0;\n}\n