/* parse.y - Yacc grammar for bash. */\n\n/* Copyright (C) 1989-2015 Free Software Foundation, Inc.\n\n   This file is part of GNU Bash, the Bourne Again SHell.\n\n   Bash is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   Bash is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with Bash.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n%{\n#include \"config.h\"\n\n#include \"bashtypes.h\"\n#include \"bashansi.h\"\n\n#include \"filecntl.h\"\n\n#if defined (HAVE_UNISTD_H)\n#  include <unistd.h>\n#endif\n\n#if defined (HAVE_LOCALE_H)\n#  include <locale.h>\n#endif\n\n#include <stdio.h>\n#include \"chartypes.h\"\n#include <signal.h>\n\n#include \"memalloc.h\"\n\n#include \"bashintl.h\"\n\n#define NEED_STRFTIME_DECL\t/* used in externs.h */\n\n#include \"shell.h\"\n#include \"typemax.h\"\t\t/* SIZE_MAX if needed */\n#include \"trap.h\"\n#include \"flags.h\"\n#include \"parser.h\"\n#include \"mailcheck.h\"\n#include \"test.h\"\n#include \"builtins.h\"\n#include \"builtins/common.h\"\n#include \"builtins/builtext.h\"\n\n#include \"shmbutil.h\"\n\n#if defined (READLINE)\n#  include \"bashline.h\"\n#  include <readline/readline.h>\n#endif /* READLINE */\n\n#if defined (HISTORY)\n#  include \"bashhist.h\"\n#  include <readline/history.h>\n#endif /* HISTORY */\n\n#if defined (JOB_CONTROL)\n#  include \"jobs.h\"\n#else\nextern int cleanup_dead_jobs __P((void));\n#endif /* JOB_CONTROL */\n\n#if defined (ALIAS)\n#  include \"alias.h\"\n#else\ntypedef void *alias_t;\n#endif /* ALIAS */\n\n#if defined (PROMPT_STRING_DECODE)\n#  ifndef _MINIX\n#    include <sys/param.h>\n#  endif\n#  include <time.h>\n#  if defined (TM_IN_SYS_TIME)\n#    include <sys/types.h>\n#    include <sys/time.h>\n#  endif /* TM_IN_SYS_TIME */\n#  include \"maxpath.h\"\n#endif /* PROMPT_STRING_DECODE */\n\n#define RE_READ_TOKEN\t-99\n#define NO_EXPANSION\t-100\n\n#ifdef DEBUG\n#  define YYDEBUG 1\n#else\n#  define YYDEBUG 0\n#endif\n\n#if defined (HANDLE_MULTIBYTE)\n#  define last_shell_getc_is_singlebyte \\\n\t((shell_input_line_index > 1) \\\n\t\t? shell_input_line_property[shell_input_line_index - 1] \\\n\t\t: 1)\n#  define MBTEST(x)\t((x) && last_shell_getc_is_singlebyte)\n#else\n#  define last_shell_getc_is_singlebyte\t1\n#  define MBTEST(x)\t((x))\n#endif\n\n#if defined (EXTENDED_GLOB)\nextern int extended_glob;\n#endif\n\nextern int eof_encountered;\nextern int no_line_editing, running_under_emacs;\nextern int current_command_number;\nextern int sourcelevel, parse_and_execute_level;\nextern int posixly_correct;\nextern int last_command_exit_value;\nextern pid_t last_command_subst_pid;\nextern char *shell_name, *current_host_name;\nextern char *dist_version;\nextern int patch_level;\nextern int dump_translatable_strings, dump_po_strings;\nextern sh_builtin_func_t *last_shell_builtin, *this_shell_builtin;\nextern int here_doc_first_line;\n#if defined (BUFFERED_INPUT)\nextern int bash_input_fd_changed;\n#endif\n\nextern int errno;\n/* **************************************************************** */\n/*\t\t\t\t\t\t\t\t    */\n/*\t\t    \"Forward\" declarations\t\t\t    */\n/*\t\t\t\t\t\t\t\t    */\n/* **************************************************************** */\n\n#ifdef DEBUG\nstatic void debug_parser __P((int));\n#endif\n\nstatic int yy_getc __P((void));\nstatic int yy_ungetc __P((int));\n\n#if defined (READLINE)\nstatic int yy_readline_get __P((void));\nstatic int yy_readline_unget __P((int));\n#endif\n\nstatic int yy_string_get __P((void));\nstatic int yy_string_unget __P((int));\nstatic void rewind_input_string __P((void));\nstatic int yy_stream_get __P((void));\nstatic int yy_stream_unget __P((int));\n\nstatic int shell_getc __P((int));\nstatic void shell_ungetc __P((int));\nstatic void discard_until __P((int));\n\n#if defined (ALIAS) || defined (DPAREN_ARITHMETIC)\nstatic void push_string __P((char *, int, alias_t *));\nstatic void pop_string __P((void));\nstatic void free_string_list __P((void));\n#endif\n\nstatic char *read_a_line __P((int));\n\nstatic int reserved_word_acceptable __P((int));\nstatic int yylex __P((void));\n\nstatic void push_heredoc __P((REDIRECT *));\nstatic char *mk_alexpansion __P((char *));\nstatic int alias_expand_token __P((char *));\nstatic int time_command_acceptable __P((void));\nstatic int special_case_tokens __P((char *));\nstatic int read_token __P((int));\nstatic char *parse_matched_pair __P((int, int, int, int *, int));\nstatic char *parse_comsub __P((int, int, int, int *, int));\n#if defined (ARRAY_VARS)\nstatic char *parse_compound_assignment __P((int *));\n#endif\n#if defined (DPAREN_ARITHMETIC) || defined (ARITH_FOR_COMMAND)\nstatic int parse_dparen __P((int));\nstatic int parse_arith_cmd __P((char **, int));\n#endif\n#if defined (COND_COMMAND)\nstatic void cond_error __P((void));\nstatic COND_COM *cond_expr __P((void));\nstatic COND_COM *cond_or __P((void));\nstatic COND_COM *cond_and __P((void));\nstatic COND_COM *cond_term __P((void));\nstatic int cond_skip_newlines __P((void));\nstatic COMMAND *parse_cond_command __P((void));\n#endif\n#if defined (ARRAY_VARS)\nstatic int token_is_assignment __P((char *, int));\nstatic int token_is_ident __P((char *, int));\n#endif\nstatic int read_token_word __P((int));\nstatic void discard_parser_constructs __P((int));\n\nstatic char *error_token_from_token __P((int));\nstatic char *error_token_from_text __P((void));\nstatic void print_offending_line __P((void));\nstatic void report_syntax_error __P((char *));\n\nstatic void handle_eof_input_unit __P((void));\nstatic void prompt_again __P((void));\n#if 0\nstatic void reset_readline_prompt __P((void));\n#endif\nstatic void print_prompt __P((void));\n\n#if defined (HANDLE_MULTIBYTE)\nstatic void set_line_mbstate __P((void));\nstatic char *shell_input_line_property = NULL;\n#else\n#  define set_line_mbstate()\n#endif\n\nextern int yyerror __P((const char *));\n\n#ifdef DEBUG\nextern int yydebug;\n#endif\n\n/* Default prompt strings */\nchar *primary_prompt = PPROMPT;\nchar *secondary_prompt = SPROMPT;\n\n/* PROMPT_STRING_POINTER points to one of these, never to an actual string. */\nchar *ps1_prompt, *ps2_prompt;\n\n/* Displayed after reading a command but before executing it in an interactive shell */\nchar *ps0_prompt;\n\n/* Handle on the current prompt string.  Indirectly points through\n   ps1_ or ps2_prompt. */\nchar **prompt_string_pointer = (char **)NULL;\nchar *current_prompt_string;\n\n/* Non-zero means we expand aliases in commands. */\nint expand_aliases = 0;\n\n/* If non-zero, the decoded prompt string undergoes parameter and\n   variable substitution, command substitution, arithmetic substitution,\n   string expansion, process substitution, and quote removal in\n   decode_prompt_string. */\nint promptvars = 1;\n\n/* If non-zero, $\'...\' and $\"...\" are expanded when they appear within\n   a ${...} expansion, even when the expansion appears within double\n   quotes. */\nint extended_quote = 1;\n\n/* The number of lines read from input while creating the current command. */\nint current_command_line_count;\n\n/* The number of lines in a command saved while we run parse_and_execute */\nint saved_command_line_count;\n\n/* The token that currently denotes the end of parse. */\nint shell_eof_token;\n\n/* The token currently being read. */\nint current_token;\n\n/* The current parser state. */\nint parser_state;\n\n/* Variables to manage the task of reading here documents, because we need to\n   defer the reading until after a complete command has been collected. */\nstatic REDIRECT *redir_stack[HEREDOC_MAX];\nint need_here_doc;\n\n/* Where shell input comes from.  History expansion is performed on each\n   line when the shell is interactive. */\nstatic char *shell_input_line = (char *)NULL;\nstatic size_t shell_input_line_index;\nstatic size_t shell_input_line_size;\t/* Amount allocated for shell_input_line. */\nstatic size_t shell_input_line_len;\t/* strlen (shell_input_line) */\n\n/* Either zero or EOF. */\nstatic int shell_input_line_terminator;\n\n/* The line number in a script on which a function definition starts. */\nstatic int function_dstart;\n\n/* The line number in a script on which a function body starts. */\nstatic int function_bstart;\n\n/* The line number in a script at which an arithmetic for command starts. */\nstatic int arith_for_lineno;\n\n/* The decoded prompt string.  Used if READLINE is not defined or if\n   editing is turned off.  Analogous to current_readline_prompt. */\nstatic char *current_decoded_prompt;\n\n/* The last read token, or NULL.  read_token () uses this for context\n   checking. */\nstatic int last_read_token;\n\n/* The token read prior to last_read_token. */\nstatic int token_before_that;\n\n/* The token read prior to token_before_that. */\nstatic int two_tokens_ago;\n\nstatic int global_extglob;\n\n/* The line number in a script where the word in a `case WORD\', `select WORD\'\n   or `for WORD\' begins.  This is a nested command maximum, since the array\n   index is decremented after a case, select, or for command is parsed. */\n#define MAX_CASE_NEST\t128\nstatic int word_lineno[MAX_CASE_NEST+1];\nstatic int word_top = -1;\n\n/* If non-zero, it is the token that we want read_token to return\n   regardless of what text is (or isn\'t) present to be read.  This\n   is reset by read_token.  If token_to_read == WORD or\n   ASSIGNMENT_WORD, yylval.word should be set to word_desc_to_read. */\nstatic int token_to_read;\nstatic WORD_DESC *word_desc_to_read;\n\nstatic REDIRECTEE source;\nstatic REDIRECTEE redir;\n%}\n\n%union {\n  WORD_DESC *word;\t\t/* the word that we read. */\n  int number;\t\t\t/* the number that we read. */\n  WORD_LIST *word_list;\n  COMMAND *command;\n  REDIRECT *redirect;\n  ELEMENT element;\n  PATTERN_LIST *pattern;\n}\n\n/* Reserved words.  Members of the first group are only recognized\n   in the case that they are preceded by a list_terminator.  Members\n   of the second group are for [[...]] commands.  Members of the\n   third group are recognized only under special circumstances. */\n%token IF THEN ELSE ELIF FI CASE ESAC FOR SELECT WHILE UNTIL DO DONE FUNCTION COPROC\n%token COND_START COND_END COND_ERROR\n%token IN BANG TIME TIMEOPT TIMEIGN\n\n/* More general tokens. yylex () knows how to make these. */\n%token <word> WORD ASSIGNMENT_WORD REDIR_WORD\n%token <number> NUMBER\n%token <word_list> ARITH_CMD ARITH_FOR_EXPRS\n%token <command> COND_CMD\n%token AND_AND OR_OR GREATER_GREATER LESS_LESS LESS_AND LESS_LESS_LESS\n%token GREATER_AND SEMI_SEMI SEMI_AND SEMI_SEMI_AND\n%token LESS_LESS_MINUS AND_GREATER AND_GREATER_GREATER LESS_GREATER\n%token GREATER_BAR BAR_AND\n\n/* The types that the various syntactical units return. */\n\n%type <command> inputunit command pipeline pipeline_command\n%type <command> list list0 list1 compound_list simple_list simple_list1\n%type <command> simple_command shell_command\n%type <command> for_command select_command case_command group_command\n%type <command> arith_command\n%type <command> cond_command\n%type <command> arith_for_command\n%type <command> coproc\n%type <command> function_def function_body if_command elif_clause subshell\n%type <redirect> redirection redirection_list\n%type <element> simple_command_element\n%type <word_list> word_list pattern\n%type <pattern> pattern_list case_clause_sequence case_clause\n%type <number> timespec\n%type <number> list_terminator\n\n%start inputunit\n\n%left \'&\' \';\' \'\\n\' yacc_EOF\n%left AND_AND OR_OR\n%right \'|\' BAR_AND\n%%\n\ninputunit:\tsimple_list simple_list_terminator\n\t\t\t{\n\t\t\t  /* Case of regular command.  Discard the error\n\t\t\t     safety net,and return the command just parsed. */\n\t\t\t  global_command = $1;\n\t\t\t  eof_encountered = 0;\n\t\t\t  /* discard_parser_constructs (0); */\n\t\t\t  if (parser_state & PST_CMDSUBST)\n\t\t\t    parser_state |= PST_EOFTOKEN;\n\t\t\t  YYACCEPT;\n\t\t\t}\n\t|\t\'\\n\'\n\t\t\t{\n\t\t\t  /* Case of regular command, but not a very\n\t\t\t     interesting one.  Return a NULL command. */\n\t\t\t  global_command = (COMMAND *)NULL;\n\t\t\t  if (parser_state & PST_CMDSUBST)\n\t\t\t    parser_state |= PST_EOFTOKEN;\n\t\t\t  YYACCEPT;\n\t\t\t}\n\t|\terror \'\\n\'\n\t\t\t{\n\t\t\t  /* Error during parsing.  Return NULL command. */\n\t\t\t  global_command = (COMMAND *)NULL;\n\t\t\t  eof_encountered = 0;\n\t\t\t  /* discard_parser_constructs (1); */\n\t\t\t  if (interactive && parse_and_execute_level == 0)\n\t\t\t    {\n\t\t\t      YYACCEPT;\n\t\t\t    }\n\t\t\t  else\n\t\t\t    {\n\t\t\t      YYABORT;\n\t\t\t    }\n\t\t\t}\n\t|\tyacc_EOF\n\t\t\t{\n\t\t\t  /* Case of EOF seen by itself.  Do ignoreeof or\n\t\t\t     not. */\n\t\t\t  global_command = (COMMAND *)NULL;\n\t\t\t  handle_eof_input_unit ();\n\t\t\t  YYACCEPT;\n\t\t\t}\n\t;\n\nword_list:\tWORD\n\t\t\t{ $$ = make_word_list ($1, (WORD_LIST *)NULL); }\n\t|\tword_list WORD\n\t\t\t{ $$ = make_word_list ($2, $1); }\n\t;\n\nredirection:\t\'>\' WORD\n\t\t\t{\n\t\t\t  source.dest = 1;\n\t\t\t  redir.filename = $2;\n\t\t\t  $$ = make_redirection (source, r_output_direction, redir, 0);\n\t\t\t}\n\t|\t\'<\' WORD\n\t\t\t{\n\t\t\t  source.dest = 0;\n\t\t\t  redir.filename = $2;\n\t\t\t  $$ = make_redirection (source, r_input_direction, redir, 0);\n\t\t\t}\n\t|\tNUMBER \'>\' WORD\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_output_direction, redir, 0);\n\t\t\t}\n\t|\tNUMBER \'<\' WORD\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_input_direction, redir, 0);\n\t\t\t}\n\t|\tREDIR_WORD \'>\' WORD\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_output_direction, redir, REDIR_VARASSIGN);\n\t\t\t}\n\t|\tREDIR_WORD \'<\' WORD\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_input_direction, redir, REDIR_VARASSIGN);\n\t\t\t}\n\t|\tGREATER_GREATER WORD\n\t\t\t{\n\t\t\t  source.dest = 1;\n\t\t\t  redir.filename = $2;\n\t\t\t  $$ = make_redirection (source, r_appending_to, redir, 0);\n\t\t\t}\n\t|\tNUMBER GREATER_GREATER WORD\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_appending_to, redir, 0);\n\t\t\t}\n\t|\tREDIR_WORD GREATER_GREATER WORD\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_appending_to, redir, REDIR_VARASSIGN);\n\t\t\t}\n\t|\tGREATER_BAR WORD\n\t\t\t{\n\t\t\t  source.dest = 1;\n\t\t\t  redir.filename = $2;\n\t\t\t  $$ = make_redirection (source, r_output_force, redir, 0);\n\t\t\t}\n\t|\tNUMBER GREATER_BAR WORD\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_output_force, redir, 0);\n\t\t\t}\n\t|\tREDIR_WORD GREATER_BAR WORD\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_output_force, redir, REDIR_VARASSIGN);\n\t\t\t}\n\t|\tLESS_GREATER WORD\n\t\t\t{\n\t\t\t  source.dest = 0;\n\t\t\t  redir.filename = $2;\n\t\t\t  $$ = make_redirection (source, r_input_output, redir, 0);\n\t\t\t}\n\t|\tNUMBER LESS_GREATER WORD\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_input_output, redir, 0);\n\t\t\t}\n\t|\tREDIR_WORD LESS_GREATER WORD\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_input_output, redir, REDIR_VARASSIGN);\n\t\t\t}\n\t|\tLESS_LESS WORD\n\t\t\t{\n\t\t\t  source.dest = 0;\n\t\t\t  redir.filename = $2;\n\t\t\t  $$ = make_redirection (source, r_reading_until, redir, 0);\n\t\t\t  push_heredoc ($$);\n\t\t\t}\n\t|\tNUMBER LESS_LESS WORD\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_reading_until, redir, 0);\n\t\t\t  push_heredoc ($$);\n\t\t\t}\n\t|\tREDIR_WORD LESS_LESS WORD\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_reading_until, redir, REDIR_VARASSIGN);\n\t\t\t  push_heredoc ($$);\n\t\t\t}\n\t|\tLESS_LESS_MINUS WORD\n\t\t\t{\n\t\t\t  source.dest = 0;\n\t\t\t  redir.filename = $2;\n\t\t\t  $$ = make_redirection (source, r_deblank_reading_until, redir, 0);\n\t\t\t  push_heredoc ($$);\n\t\t\t}\n\t|\tNUMBER LESS_LESS_MINUS WORD\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_deblank_reading_until, redir, 0);\n\t\t\t  push_heredoc ($$);\n\t\t\t}\n\t|\tREDIR_WORD  LESS_LESS_MINUS WORD\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_deblank_reading_until, redir, REDIR_VARASSIGN);\n\t\t\t  push_heredoc ($$);\n\t\t\t}\n\t|\tLESS_LESS_LESS WORD\n\t\t\t{\n\t\t\t  source.dest = 0;\n\t\t\t  redir.filename = $2;\n\t\t\t  $$ = make_redirection (source, r_reading_string, redir, 0);\n\t\t\t}\n\t|\tNUMBER LESS_LESS_LESS WORD\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_reading_string, redir, 0);\n\t\t\t}\n\t|\tREDIR_WORD LESS_LESS_LESS WORD\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_reading_string, redir, REDIR_VARASSIGN);\n\t\t\t}\n\t|\tLESS_AND NUMBER\n\t\t\t{\n\t\t\t  source.dest = 0;\n\t\t\t  redir.dest = $2;\n\t\t\t  $$ = make_redirection (source, r_duplicating_input, redir, 0);\n\t\t\t}\n\t|\tNUMBER LESS_AND NUMBER\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.dest = $3;\n\t\t\t  $$ = make_redirection (source, r_duplicating_input, redir, 0);\n\t\t\t}\n\t|\tREDIR_WORD LESS_AND NUMBER\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.dest = $3;\n\t\t\t  $$ = make_redirection (source, r_duplicating_input, redir, REDIR_VARASSIGN);\n\t\t\t}\n\t|\tGREATER_AND NUMBER\n\t\t\t{\n\t\t\t  source.dest = 1;\n\t\t\t  redir.dest = $2;\n\t\t\t  $$ = make_redirection (source, r_duplicating_output, redir, 0);\n\t\t\t}\n\t|\tNUMBER GREATER_AND NUMBER\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.dest = $3;\n\t\t\t  $$ = make_redirection (source, r_duplicating_output, redir, 0);\n\t\t\t}\n\t|\tREDIR_WORD GREATER_AND NUMBER\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.dest = $3;\n\t\t\t  $$ = make_redirection (source, r_duplicating_output, redir, REDIR_VARASSIGN);\n\t\t\t}\n\t|\tLESS_AND WORD\n\t\t\t{\n\t\t\t  source.dest = 0;\n\t\t\t  redir.filename = $2;\n\t\t\t  $$ = make_redirection (source, r_duplicating_input_word, redir, 0);\n\t\t\t}\n\t|\tNUMBER LESS_AND WORD\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_duplicating_input_word, redir, 0);\n\t\t\t}\n\t|\tREDIR_WORD LESS_AND WORD\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_duplicating_input_word, redir, REDIR_VARASSIGN);\n\t\t\t}\n\t|\tGREATER_AND WORD\n\t\t\t{\n\t\t\t  source.dest = 1;\n\t\t\t  redir.filename = $2;\n\t\t\t  $$ = make_redirection (source, r_duplicating_output_word, redir, 0);\n\t\t\t}\n\t|\tNUMBER GREATER_AND WORD\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_duplicating_output_word, redir, 0);\n\t\t\t}\n\t|\tREDIR_WORD GREATER_AND WORD\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.filename = $3;\n\t\t\t  $$ = make_redirection (source, r_duplicating_output_word, redir, REDIR_VARASSIGN);\n\t\t\t}\n\t|\tGREATER_AND \'-\'\n\t\t\t{\n\t\t\t  source.dest = 1;\n\t\t\t  redir.dest = 0;\n\t\t\t  $$ = make_redirection (source, r_close_this, redir, 0);\n\t\t\t}\n\t|\tNUMBER GREATER_AND \'-\'\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.dest = 0;\n\t\t\t  $$ = make_redirection (source, r_close_this, redir, 0);\n\t\t\t}\n\t|\tREDIR_WORD GREATER_AND \'-\'\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.dest = 0;\n\t\t\t  $$ = make_redirection (source, r_close_this, redir, REDIR_VARASSIGN);\n\t\t\t}\n\t|\tLESS_AND \'-\'\n\t\t\t{\n\t\t\t  source.dest = 0;\n\t\t\t  redir.dest = 0;\n\t\t\t  $$ = make_redirection (source, r_close_this, redir, 0);\n\t\t\t}\n\t|\tNUMBER LESS_AND \'-\'\n\t\t\t{\n\t\t\t  source.dest = $1;\n\t\t\t  redir.dest = 0;\n\t\t\t  $$ = make_redirection (source, r_close_this, redir, 0);\n\t\t\t}\n\t|\tREDIR_WORD LESS_AND \'-\'\n\t\t\t{\n\t\t\t  source.filename = $1;\n\t\t\t  redir.dest = 0;\n\t\t\t  $$ = make_redirection (source, r_close_this, redir, REDIR_VARASSIGN);\n\t\t\t}\n\t|\tAND_GREATER WORD\n\t\t\t{\n\t\t\t  source.dest = 1;\n\t\t\t  redir.filename = $2;\n\t\t\t  $$ = make_redirection (source, r_err_and_out, redir, 0);\n\t\t\t}\n\t|\tAND_GREATER_GREATER WORD\n\t\t\t{\n\t\t\t  source.dest = 1;\n\t\t\t  redir.filename = $2;\n\t\t\t  $$ = make_redirection (source, r_append_err_and_out, redir, 0);\n\t\t\t}\n\t;\n\nsimple_command_element: WORD\n\t\t\t{ $$.word = $1; $$.redirect = 0; }\n\t|\tASSIGNMENT_WORD\n\t\t\t{ $$.word = $1; $$.redirect = 0; }\n\t|\tredirection\n\t\t\t{ $$.redirect = $1; $$.word = 0; }\n\t;\n\nredirection_list: redirection\n\t\t\t{\n\t\t\t  $$ = $1;\n\t\t\t}\n\t|\tredirection_list redirection\n\t\t\t{\n\t\t\t  register REDIRECT *t;\n\n\t\t\t  for (t = $1; t->next; t = t->next)\n\t\t\t    ;\n\t\t\t  t->next = $2;\n\t\t\t  $$ = $1;\n\t\t\t}\n\t;\n\nsimple_command:\tsimple_command_element\n\t\t\t{ $$ = make_simple_command ($1, (COMMAND *)NULL); }\n\t|\tsimple_command simple_command_element\n\t\t\t{ $$ = make_simple_command ($2, $1); }\n\t;\n\ncommand:\tsimple_command\n\t\t\t{ $$ = clean_simple_command ($1); }\n\t|\tshell_command\n\t\t\t{ $$ = $1; }\n\t|\tshell_command redirection_list\n\t\t\t{\n\t\t\t  COMMAND *tc;\n\n\t\t\t  tc = $1;\n\t\t\t  if (tc->redirects)\n\t\t\t    {\n\t\t\t      register REDIRECT *t;\n\t\t\t      for (t = tc->redirects; t->next; t = t->next)\n\t\t\t\t;\n\t\t\t      t->next = $2;\n\t\t\t    }\n\t\t\t  else\n\t\t\t    tc->redirects = $2;\n\t\t\t  $$ = $1;\n\t\t\t}\n\t|\tfunction_def\n\t\t\t{ $$ = $1; }\n\t|\tcoproc\n\t\t\t{ $$ = $1; }\n\t;\n\nshell_command:\tfor_command\n\t\t\t{ $$ = $1; }\n\t|\tcase_command\n\t\t\t{ $$ = $1; }\n \t|\tWHILE compound_list DO compound_list DONE\n\t\t\t{ $$ = make_while_command ($2, $4); }\n\t|\tUNTIL compound_list DO compound_list DONE\n\t\t\t{ $$ = make_until_command ($2, $4); }\n\t|\tselect_command\n\t\t\t{ $$ = $1; }\n\t|\tif_command\n\t\t\t{ $$ = $1; }\n\t|\tsubshell\n\t\t\t{ $$ = $1; }\n\t|\tgroup_command\n\t\t\t{ $$ = $1; }\n\t|\tarith_command\n\t\t\t{ $$ = $1; }\n\t|\tcond_command\n\t\t\t{ $$ = $1; }\n\t|\tarith_for_command\n\t\t\t{ $$ = $1; }\n\t;\n\nfor_command:\tFOR WORD newline_list DO compound_list DONE\n\t\t\t{\n\t\t\t  $$ = make_for_command ($2, add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), $5, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tFOR WORD newline_list \'{\' compound_list \'}\'\n\t\t\t{\n\t\t\t  $$ = make_for_command ($2, add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), $5, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tFOR WORD \';\' newline_list DO compound_list DONE\n\t\t\t{\n\t\t\t  $$ = make_for_command ($2, add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), $6, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tFOR WORD \';\' newline_list \'{\' compound_list \'}\'\n\t\t\t{\n\t\t\t  $$ = make_for_command ($2, add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), $6, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tFOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE\n\t\t\t{\n\t\t\t  $$ = make_for_command ($2, REVERSE_LIST ($5, WORD_LIST *), $9, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tFOR WORD newline_list IN word_list list_terminator newline_list \'{\' compound_list \'}\'\n\t\t\t{\n\t\t\t  $$ = make_for_command ($2, REVERSE_LIST ($5, WORD_LIST *), $9, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tFOR WORD newline_list IN list_terminator newline_list DO compound_list DONE\n\t\t\t{\n\t\t\t  $$ = make_for_command ($2, (WORD_LIST *)NULL, $8, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tFOR WORD newline_list IN list_terminator newline_list \'{\' compound_list \'}\'\n\t\t\t{\n\t\t\t  $$ = make_for_command ($2, (WORD_LIST *)NULL, $8, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t;\n\narith_for_command:\tFOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE\n\t\t\t\t{\n\t\t\t\t  $$ = make_arith_for_command ($2, $6, arith_for_lineno);\n\t\t\t\t  if (word_top > 0) word_top--;\n\t\t\t\t}\n\t|\t\tFOR ARITH_FOR_EXPRS list_terminator newline_list \'{\' compound_list \'}\'\n\t\t\t\t{\n\t\t\t\t  $$ = make_arith_for_command ($2, $6, arith_for_lineno);\n\t\t\t\t  if (word_top > 0) word_top--;\n\t\t\t\t}\n\t|\t\tFOR ARITH_FOR_EXPRS DO compound_list DONE\n\t\t\t\t{\n\t\t\t\t  $$ = make_arith_for_command ($2, $4, arith_for_lineno);\n\t\t\t\t  if (word_top > 0) word_top--;\n\t\t\t\t}\n\t|\t\tFOR ARITH_FOR_EXPRS \'{\' compound_list \'}\'\n\t\t\t\t{\n\t\t\t\t  $$ = make_arith_for_command ($2, $4, arith_for_lineno);\n\t\t\t\t  if (word_top > 0) word_top--;\n\t\t\t\t}\n\t;\n\nselect_command:\tSELECT WORD newline_list DO list DONE\n\t\t\t{\n\t\t\t  $$ = make_select_command ($2, add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), $5, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tSELECT WORD newline_list \'{\' list \'}\'\n\t\t\t{\n\t\t\t  $$ = make_select_command ($2, add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), $5, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tSELECT WORD \';\' newline_list DO list DONE\n\t\t\t{\n\t\t\t  $$ = make_select_command ($2, add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), $6, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tSELECT WORD \';\' newline_list \'{\' list \'}\'\n\t\t\t{\n\t\t\t  $$ = make_select_command ($2, add_string_to_list (\"\\\"$@\\\"\", (WORD_LIST *)NULL), $6, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tSELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE\n\t\t\t{\n\t\t\t  $$ = make_select_command ($2, REVERSE_LIST ($5, WORD_LIST *), $9, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tSELECT WORD newline_list IN word_list list_terminator newline_list \'{\' list \'}\'\n\t\t\t{\n\t\t\t  $$ = make_select_command ($2, REVERSE_LIST ($5, WORD_LIST *), $9, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t;\n\ncase_command:\tCASE WORD newline_list IN newline_list ESAC\n\t\t\t{\n\t\t\t  $$ = make_case_command ($2, (PATTERN_LIST *)NULL, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tCASE WORD newline_list IN case_clause_sequence newline_list ESAC\n\t\t\t{\n\t\t\t  $$ = make_case_command ($2, $5, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t|\tCASE WORD newline_list IN case_clause ESAC\n\t\t\t{\n\t\t\t  $$ = make_case_command ($2, $5, word_lineno[word_top]);\n\t\t\t  if (word_top > 0) word_top--;\n\t\t\t}\n\t;\n\nfunction_def:\tWORD \'(\' \')\' newline_list function_body\n\t\t\t{ $$ = make_function_def ($1, $5, function_dstart, function_bstart); }\n\n\t|\tFUNCTION WORD \'(\' \')\' newline_list function_body\n\t\t\t{ $$ = make_function_def ($2, $6, function_dstart, function_bstart); }\n\n\t|\tFUNCTION WORD newline_list function_body\n\t\t\t{ $$ = make_function_def ($2, $4, function_dstart, function_bstart); }\n\t;\n\nfunction_body:\tshell_command\n\t\t\t{ $$ = $1; }\n\t|\tshell_command redirection_list\n\t\t\t{\n\t\t\t  COMMAND *tc;\n\n\t\t\t  tc = $1;\n\t\t\t  /* According to Posix.2 3.9.5, redirections\n\t\t\t     specified after the body of a function should\n\t\t\t     be attached to the function and performed when\n\t\t\t     the function is executed, not as part of the\n\t\t\t     function definition command. */\n\t\t\t  /* XXX - I don\'t think it matters, but we might\n\t\t\t     want to change this in the future to avoid\n\t\t\t     problems differentiating between a function\n\t\t\t     definition with a redirection and a function\n\t\t\t     definition containing a single command with a\n\t\t\t     redirection.  The two are semantically equivalent,\n\t\t\t     though -- the only difference is in how the\n\t\t\t     command printing code displays the redirections. */\n\t\t\t  if (tc->redirects)\n\t\t\t    {\n\t\t\t      register REDIRECT *t;\n\t\t\t      for (t = tc->redirects; t->next; t = t->next)\n\t\t\t\t;\n\t\t\t      t->next = $2;\n\t\t\t    }\n\t\t\t  else\n\t\t\t    tc->redirects = $2;\n\t\t\t  $$ = $1;\n\t\t\t}\n\t;\n\nsubshell:\t\'(\' compound_list \')\'\n\t\t\t{\n\t\t\t  $$ = make_subshell_command ($2);\n\t\t\t  $$->flags |= CMD_WANT_SUBSHELL;\n\t\t\t}\n\t;\n\ncoproc:\t\tCOPROC shell_command\n\t\t\t{\n\t\t\t  $$ = make_coproc_command (\"COPROC\", $2);\n\t\t\t  $$->flags |= CMD_WANT_SUBSHELL|CMD_COPROC_SUBSHELL;\n\t\t\t}\n\t|\tCOPROC shell_command redirection_list\n\t\t\t{\n\t\t\t  COMMAND *tc;\n\n\t\t\t  tc = $2;\n\t\t\t  if (tc->redirects)\n\t\t\t    {\n\t\t\t      register REDIRECT *t;\n\t\t\t      for (t = tc->redirects; t->next; t = t->next)\n\t\t\t\t;\n\t\t\t      t->next = $3;\n\t\t\t    }\n\t\t\t  else\n\t\t\t    tc->redirects = $3;\n\t\t\t  $$ = make_coproc_command (\"COPROC\", $2);\n\t\t\t  $$->flags |= CMD_WANT_SUBSHELL|CMD_COPROC_SUBSHELL;\n\t\t\t}\n\t|\tCOPROC WORD shell_command\n\t\t\t{\n\t\t\t  $$ = make_coproc_command ($2->word, $3);\n\t\t\t  $$->flags |= CMD_WANT_SUBSHELL|CMD_COPROC_SUBSHELL;\n\t\t\t}\n\t|\tCOPROC WORD shell_command redirection_list\n\t\t\t{\n\t\t\t  COMMAND *tc;\n\n\t\t\t  tc = $3;\n\t\t\t  if (tc->redirects)\n\t\t\t    {\n\t\t\t      register REDIRECT *t;\n\t\t\t      for (t = tc->redirects; t->next; t = t->next)\n\t\t\t\t;\n\t\t\t      t->next = $4;\n\t\t\t    }\n\t\t\t  else\n\t\t\t    tc->redirects = $4;\n\t\t\t  $$ = make_coproc_command ($2->word, $3);\n\t\t\t  $$->flags |= CMD_WANT_SUBSHELL|CMD_COPROC_SUBSHELL;\n\t\t\t}\n\t|\tCOPROC simple_command\n\t\t\t{\n\t\t\t  $$ = make_coproc_command (\"COPROC\", clean_simple_command ($2));\n\t\t\t  $$->flags |= CMD_WANT_SUBSHELL|CMD_COPROC_SUBSHELL;\n\t\t\t}\n\t;\n\nif_command:\tIF compound_list THEN compound_list FI\n\t\t\t{ $$ = make_if_command ($2, $4, (COMMAND *)NULL); }\n\t|\tIF compound_list THEN compound_list ELSE compound_list FI\n\t\t\t{ $$ = make_if_command ($2, $4, $6); }\n\t|\tIF compound_list THEN compound_list elif_clause FI\n\t\t\t{ $$ = make_if_command ($2, $4, $5); }\n\t;\n\n\ngroup_command:\t\'{\' compound_list \'}\'\n\t\t\t{ $$ = make_group_command ($2); }\n\t;\n\narith_command:\tARITH_CMD\n\t\t\t{ $$ = make_arith_command ($1); }\n\t;\n\ncond_command:\tCOND_START COND_CMD COND_END\n\t\t\t{ $$ = $2; }\n\t; \n\nelif_clause:\tELIF compound_list THEN compound_list\n\t\t\t{ $$ = make_if_command ($2, $4, (COMMAND *)NULL); }\n\t|\tELIF compound_list THEN compound_list ELSE compound_list\n\t\t\t{ $$ = make_if_command ($2, $4, $6); }\n\t|\tELIF compound_list THEN compound_list elif_clause\n\t\t\t{ $$ = make_if_command ($2, $4, $5); }\n\t;\n\ncase_clause:\tpattern_list\n\t|\tcase_clause_sequence pattern_list\n\t\t\t{ $2->next = $1; $$ = $2; }\n\t;\n\npattern_list:\tnewline_list pattern \')\' compound_list\n\t\t\t{ $$ = make_pattern_list ($2, $4); }\n\t|\tnewline_list pattern \')\' newline_list\n\t\t\t{ $$ = make_pattern_list ($2, (COMMAND *)NULL); }\n\t|\tnewline_list \'(\' pattern \')\' compound_list\n\t\t\t{ $$ = make_pattern_list ($3, $5); }\n\t|\tnewline_list \'(\' pattern \')\' newline_list\n\t\t\t{ $$ = make_pattern_list ($3, (COMMAND *)NULL); }\n\t;\n\ncase_clause_sequence:  pattern_list SEMI_SEMI\n\t\t\t{ $$ = $1; }\n\t|\tcase_clause_sequence pattern_list SEMI_SEMI\n\t\t\t{ $2->next = $1; $$ = $2; }\n\t|\tpattern_list SEMI_AND\n\t\t\t{ $1->flags |= CASEPAT_FALLTHROUGH; $$ = $1; }\n\t|\tcase_clause_sequence pattern_list SEMI_AND\n\t\t\t{ $2->flags |= CASEPAT_FALLTHROUGH; $2->next = $1; $$ = $2; }\n\t|\tpattern_list SEMI_SEMI_AND\n\t\t\t{ $1->flags |= CASEPAT_TESTNEXT; $$ = $1; }\n\t|\tcase_clause_sequence pattern_list SEMI_SEMI_AND\n\t\t\t{ $2->flags |= CASEPAT_TESTNEXT; $2->next = $1; $$ = $2; }\t\n\t;\n\npattern:\tWORD\n\t\t\t{ $$ = make_word_list ($1, (WORD_LIST *)NULL); }\n\t|\tpattern \'|\' WORD\n\t\t\t{ $$ = make_word_list ($3, $1); }\n\t;\n\n/* A list allows leading or trailing newlines and\n   newlines as operators (equivalent to semicolons).\n   It must end with a newline or semicolon.\n   Lists are used within commands such as if, for, while.  */\n\nlist:\t\tnewline_list list0\n\t\t\t{\n\t\t\t  $$ = $2;\n\t\t\t  if (need_here_doc)\n\t\t\t    gather_here_documents ();\n\t\t\t }\n\t;\n\ncompound_list:\tlist\n\t|\tnewline_list list1\n\t\t\t{\n\t\t\t  $$ = $2;\n\t\t\t}\n\t;\n\nlist0:  \tlist1 \'\\n\' newline_list\n\t|\tlist1 \'&\' newline_list\n\t\t\t{\n\t\t\t  if ($1->type == cm_connection)\n\t\t\t    $$ = connect_async_list ($1, (COMMAND *)NULL, \'&\');\n\t\t\t  else\n\t\t\t    $$ = command_connect ($1, (COMMAND *)NULL, \'&\');\n\t\t\t}\n\t|\tlist1 \';\' newline_list\n\n\t;\n\nlist1:\t\tlist1 AND_AND newline_list list1\n\t\t\t{ $$ = command_connect ($1, $4, AND_AND); }\n\t|\tlist1 OR_OR newline_list list1\n\t\t\t{ $$ = command_connect ($1, $4, OR_OR); }\n\t|\tlist1 \'&\' newline_list list1\n\t\t\t{\n\t\t\t  if ($1->type == cm_connection)\n\t\t\t    $$ = connect_async_list ($1, $4, \'&\');\n\t\t\t  else\n\t\t\t    $$ = command_connect ($1, $4, \'&\');\n\t\t\t}\n\t|\tlist1 \';\' newline_list list1\n\t\t\t{ $$ = command_connect ($1, $4, \';\'); }\n\t|\tlist1 \'\\n\' newline_list list1\n\t\t\t{ $$ = command_connect ($1, $4, \';\'); }\n\t|\tpipeline_command\n\t\t\t{ $$ = $1; }\n\t;\n\nsimple_list_terminator:\t\'\\n\'\n\t|\tyacc_EOF\n\t;\n\nlist_terminator:\'\\n\'\n\t\t{ $$ = \'\\n\'; }\n\t|\t\';\'\n\t\t{ $$ = \';\'; }\n\t|\tyacc_EOF\n\t\t{ $$ = yacc_EOF; }\n\t;\n\nnewline_list:\n\t|\tnewline_list \'\\n\'\n\t;\n\n/* A simple_list is a list that contains no significant newlines\n   and no leading or trailing newlines.  Newlines are allowed\n   only following operators, where they are not significant.\n\n   This is what an inputunit consists of.  */\n\nsimple_list:\tsimple_list1\n\t\t\t{\n\t\t\t  $$ = $1;\n\t\t\t  if (need_here_doc)\n\t\t\t    gather_here_documents ();\n\t\t\t  if ((parser_state & PST_CMDSUBST) && current_token == shell_eof_token)\n\t\t\t    {\n\t\t\t      global_command = $1;\n\t\t\t      eof_encountered = 0;\n\t\t\t      rewind_input_string ();\n\t\t\t      YYACCEPT;\n\t\t\t    }\n\t\t\t}\n\t|\tsimple_list1 \'&\'\n\t\t\t{\n\t\t\t  if ($1->type == cm_connection)\n\t\t\t    $$ = connect_async_list ($1, (COMMAND *)NULL, \'&\');\n\t\t\t  else\n\t\t\t    $$ = command_connect ($1, (COMMAND *)NULL, \'&\');\n\t\t\t  if (need_here_doc)\n\t\t\t    gather_here_documents ();\n\t\t\t  if ((parser_state & PST_CMDSUBST) && current_token == shell_eof_token)\n\t\t\t    {\n\t\t\t      global_command = $1;\n\t\t\t      eof_encountered = 0;\n\t\t\t      rewind_input_string ();\n\t\t\t      YYACCEPT;\n\t\t\t    }\n\t\t\t}\n\t|\tsimple_list1 \';\'\n\t\t\t{\n\t\t\t  $$ = $1;\n\t\t\t  if (need_here_doc)\n\t\t\t    gather_here_documents ();\n\t\t\t  if ((parser_state & PST_CMDSUBST) && current_token == shell_eof_token)\n\t\t\t    {\n\t\t\t      global_command = $1;\n\t\t\t      eof_encountered = 0;\n\t\t\t      rewind_input_string ();\n\t\t\t      YYACCEPT;\n\t\t\t    }\n\t\t\t}\n\t;\n\nsimple_list1:\tsimple_list1 AND_AND newline_list simple_list1\n\t\t\t{ $$ = command_connect ($1, $4, AND_AND); }\n\t|\tsimple_list1 OR_OR newline_list simple_list1\n\t\t\t{ $$ = command_connect ($1, $4, OR_OR); }\n\t|\tsimple_list1 \'&\' simple_list1\n\t\t\t{\n\t\t\t  if ($1->type == cm_connection)\n\t\t\t    $$ = connect_async_list ($1, $3, \'&\');\n\t\t\t  else\n\t\t\t    $$ = command_connect ($1, $3, \'&\');\n\t\t\t}\n\t|\tsimple_list1 \';\' simple_list1\n\t\t\t{ $$ = command_connect ($1, $3, \';\'); }\n\n\t|\tpipeline_command\n\t\t\t{ $$ = $1; }\n\t;\n\npipeline_command: pipeline\n\t\t\t{ $$ = $1; }\t\t\t\n\t|\tBANG pipeline_command\n\t\t\t{\n\t\t\t  if ($2)\n\t\t\t    $2->flags ^= CMD_INVERT_RETURN;\t/* toggle */\n\t\t\t  $$ = $2;\n\t\t\t}\n\t|\ttimespec pipeline_command\n\t\t\t{\n\t\t\t  if ($2)\n\t\t\t    $2->flags |= $1;\n\t\t\t  $$ = $2;\n\t\t\t}\n\t|\ttimespec list_terminator\n\t\t\t{\n\t\t\t  ELEMENT x;\n\n\t\t\t  /* Boy, this is unclean.  `time\' by itself can\n\t\t\t     time a null command.  We cheat and push a\n\t\t\t     newline back if the list_terminator was a newline\n\t\t\t     to avoid the double-newline problem (one to\n\t\t\t     terminate this, one to terminate the command) */\n\t\t\t  x.word = 0;\n\t\t\t  x.redirect = 0;\n\t\t\t  $$ = make_simple_command (x, (COMMAND *)NULL);\n\t\t\t  $$->flags |= $1;\n\t\t\t  /* XXX - let\'s cheat and push a newline back */\n\t\t\t  if ($2 == \'\\n\')\n\t\t\t    token_to_read = \'\\n\';\n\t\t\t  else if ($2 == \';\')\n\t\t\t    token_to_read = \';\';\n\t\t\t}\n\t|\tBANG list_terminator\n\t\t\t{\n\t\t\t  ELEMENT x;\n\n\t\t\t  /* This is just as unclean.  Posix says that `!\'\n\t\t\t     by itself should be equivalent to `false\'.\n\t\t\t     We cheat and push a\n\t\t\t     newline back if the list_terminator was a newline\n\t\t\t     to avoid the double-newline problem (one to\n\t\t\t     terminate this, one to terminate the command) */\n\t\t\t  x.word = 0;\n\t\t\t  x.redirect = 0;\n\t\t\t  $$ = make_simple_command (x, (COMMAND *)NULL);\n\t\t\t  $$->flags |= CMD_INVERT_RETURN;\n\t\t\t  /* XXX - let\'s cheat and push a newline back */\n\t\t\t  if ($2 == \'\\n\')\n\t\t\t    token_to_read = \'\\n\';\n\t\t\t  if ($2 == \';\')\n\t\t\t    token_to_read = \';\';\n\t\t\t}\n\t;\n\npipeline:\tpipeline \'|\' newline_list pipeline\n\t\t\t{ $$ = command_connect ($1, $4, \'|\'); }\n\t|\tpipeline BAR_AND newline_list pipeline\n\t\t\t{\n\t\t\t  /* Make cmd1 |& cmd2 equivalent to cmd1 2>&1 | cmd2 */\n\t\t\t  COMMAND *tc;\n\t\t\t  REDIRECTEE rd, sd;\n\t\t\t  REDIRECT *r;\n\n\t\t\t  tc = $1->type == cm_simple ? (COMMAND *)$1->value.Simple : $1;\n\t\t\t  sd.dest = 2;\n\t\t\t  rd.dest = 1;\n\t\t\t  r = make_redirection (sd, r_duplicating_output, rd, 0);\n\t\t\t  if (tc->redirects)\n\t\t\t    {\n\t\t\t      register REDIRECT *t;\n\t\t\t      for (t = tc->redirects; t->next; t = t->next)\n\t\t\t\t;\n\t\t\t      t->next = r;\n\t\t\t    }\n\t\t\t  else\n\t\t\t    tc->redirects = r;\n\n\t\t\t  $$ = command_connect ($1, $4, \'|\');\n\t\t\t}\n\t|\tcommand\n\t\t\t{ $$ = $1; }\n\t;\n\ntimespec:\tTIME\n\t\t\t{ $$ = CMD_TIME_PIPELINE; }\n\t|\tTIME TIMEOPT\n\t\t\t{ $$ = CMD_TIME_PIPELINE|CMD_TIME_POSIX; }\n\t|\tTIME TIMEOPT TIMEIGN\n\t\t\t{ $$ = CMD_TIME_PIPELINE|CMD_TIME_POSIX; }\n\t;\n%%\n\n/* Initial size to allocate for tokens, and the\n   amount to grow them by. */\n#define TOKEN_DEFAULT_INITIAL_SIZE 496\n#define TOKEN_DEFAULT_GROW_SIZE 512\n\n/* Should we call prompt_again? */\n#define SHOULD_PROMPT() \\\n  (interactive && (bash_input.type == st_stdin || bash_input.type == st_stream))\n\n#if defined (ALIAS)\n#  define expanding_alias() (pushed_string_list && pushed_string_list->expander)\n#else\n#  define expanding_alias() 0\n#endif\n\n/* Global var is non-zero when end of file has been reached. */\nint EOF_Reached = 0;\n\n#ifdef DEBUG\nstatic void\ndebug_parser (i)\n     int i;\n{\n#if YYDEBUG != 0\n  yydebug = i;\n#endif\n}\n#endif\n\n/* yy_getc () returns the next available character from input or EOF.\n   yy_ungetc (c) makes `c\' the next character to read.\n   init_yy_io (get, unget, type, location) makes the function GET the\n   installed function for getting the next character, makes UNGET the\n   installed function for un-getting a character, sets the type of stream\n   (either string or file) from TYPE, and makes LOCATION point to where\n   the input is coming from. */\n\n/* Unconditionally returns end-of-file. */\nint\nreturn_EOF ()\n{\n  return (EOF);\n}\n\n/* Variable containing the current get and unget functions.\n   See ./input.h for a clearer description. */\nBASH_INPUT bash_input;\n\n/* Set all of the fields in BASH_INPUT to NULL.  Free bash_input.name if it\n   is non-null, avoiding a memory leak. */\nvoid\ninitialize_bash_input ()\n{\n  bash_input.type = st_none;\n  FREE (bash_input.name);\n  bash_input.name = (char *)NULL;\n  bash_input.location.file = (FILE *)NULL;\n  bash_input.location.string = (char *)NULL;\n  bash_input.getter = (sh_cget_func_t *)NULL;\n  bash_input.ungetter = (sh_cunget_func_t *)NULL;\n}\n\n/* Set the contents of the current bash input stream from\n   GET, UNGET, TYPE, NAME, and LOCATION. */\nvoid\ninit_yy_io (get, unget, type, name, location)\n     sh_cget_func_t *get;\n     sh_cunget_func_t *unget;\n     enum stream_type type;\n     const char *name;\n     INPUT_STREAM location;\n{\n  bash_input.type = type;\n  FREE (bash_input.name);\n  bash_input.name = name ? savestring (name) : (char *)NULL;\n\n  /* XXX */\n#if defined (CRAY)\n  memcpy((char *)&bash_input.location.string, (char *)&location.string, sizeof(location));\n#else\n  bash_input.location = location;\n#endif\n  bash_input.getter = get;\n  bash_input.ungetter = unget;\n}\n\nchar *\nyy_input_name ()\n{\n  return (bash_input.name ? bash_input.name : \"stdin\");\n}\n\n/* Call this to get the next character of input. */\nstatic int\nyy_getc ()\n{\n  return (*(bash_input.getter)) ();\n}\n\n/* Call this to unget C.  That is, to make C the next character\n   to be read. */\nstatic int\nyy_ungetc (c)\n     int c;\n{\n  return (*(bash_input.ungetter)) (c);\n}\n\n#if defined (BUFFERED_INPUT)\n#ifdef INCLUDE_UNUSED\nint\ninput_file_descriptor ()\n{\n  switch (bash_input.type)\n    {\n    case st_stream:\n      return (fileno (bash_input.location.file));\n    case st_bstream:\n      return (bash_input.location.buffered_fd);\n    case st_stdin:\n    default:\n      return (fileno (stdin));\n    }\n}\n#endif\n#endif /* BUFFERED_INPUT */\n\n/* **************************************************************** */\n/*\t\t\t\t\t\t\t\t    */\n/*\t\t  Let input be read from readline ().\t\t    */\n/*\t\t\t\t\t\t\t\t    */\n/* **************************************************************** */\n\n#if defined (READLINE)\nchar *current_readline_prompt = (char *)NULL;\nchar *current_readline_line = (char *)NULL;\nint current_readline_line_index = 0;\n\nstatic int\nyy_readline_get ()\n{\n  SigHandler *old_sigint;\n  int line_len;\n  unsigned char c;\n\n  if (current_readline_line == 0)\n    {\n      if (bash_readline_initialized == 0)\n\tinitialize_readline ();\n\n#if defined (JOB_CONTROL)\n      if (job_control)\n\tgive_terminal_to (shell_pgrp, 0);\n#endif /* JOB_CONTROL */\n\n      old_sigint = IMPOSSIBLE_TRAP_HANDLER;\n      if (signal_is_ignored (SIGINT) == 0)\n\t{\n\t  /* interrupt_immediately++; */\n\t  old_sigint = (SigHandler *)set_signal_handler (SIGINT, sigint_sighandler);\n\t}\n\n      current_readline_line = readline (current_readline_prompt ?\n      \t\t\t\t\t  current_readline_prompt : \"\");\n\n      CHECK_TERMSIG;\n      if (signal_is_ignored (SIGINT) == 0)\n\t{\n\t  /* interrupt_immediately--; */\n\t  if (old_sigint != IMPOSSIBLE_TRAP_HANDLER)\n\t    set_signal_handler (SIGINT, old_sigint);\n\t}\n\n#if 0\n      /* Reset the prompt to the decoded value of prompt_string_pointer. */\n      reset_readline_prompt ();\n#endif\n\n      if (current_readline_line == 0)\n\treturn (EOF);\n\n      current_readline_line_index = 0;\n      line_len = strlen (current_readline_line);\n\n      current_readline_line = (char *)xrealloc (current_readline_line, 2 + line_len);\n      current_readline_line[line_len++] = \'\\n\';\n      current_readline_line[line_len] = \'\\0\';\n    }\n\n  if (current_readline_line[current_readline_line_index] == 0)\n    {\n      free (current_readline_line);\n      current_readline_line = (char *)NULL;\n      return (yy_readline_get ());\n    }\n  else\n    {\n      c = current_readline_line[current_readline_line_index++];\n      return (c);\n    }\n}\n\nstatic int\nyy_readline_unget (c)\n     int c;\n{\n  if (current_readline_line_index && current_readline_line)\n    current_readline_line[--current_readline_line_index] = c;\n  return (c);\n}\n\nvoid\nwith_input_from_stdin ()\n{\n  INPUT_STREAM location;\n\n  if (bash_input.type != st_stdin && stream_on_stack (st_stdin) == 0)\n    {\n      location.string = current_readline_line;\n      init_yy_io (yy_readline_get, yy_readline_unget,\n\t\t  st_stdin, \"readline stdin\", location);\n    }\n}\n\n#else  /* !READLINE */\n\nvoid\nwith_input_from_stdin ()\n{\n  with_input_from_stream (stdin, \"stdin\");\n}\n#endif\t/* !READLINE */\n\n/* **************************************************************** */\n/*\t\t\t\t\t\t\t\t    */\n/*   Let input come from STRING.  STRING is zero terminated.\t    */\n/*\t\t\t\t\t\t\t\t    */\n/* **************************************************************** */\n\nstatic int\nyy_string_get ()\n{\n  register char *string;\n  register unsigned char c;\n\n  string = bash_input.location.string;\n\n  /* If the string doesn\'t exist, or is empty, EOF found. */\n  if (string && *string)\n    {\n      c = *string++;\n      bash_input.location.string = string;\n      return (c);\n    }\n  else\n    return (EOF);\n}\n\nstatic int\nyy_string_unget (c)\n     int c;\n{\n  *(--bash_input.location.string) = c;\n  return (c);\n}\n\nvoid\nwith_input_from_string (string, name)\n     char *string;\n     const char *name;\n{\n  INPUT_STREAM location;\n\n  location.string = string;\n  init_yy_io (yy_string_get, yy_string_unget, st_string, name, location);\n}\n\n/* Count the number of characters we\'ve consumed from bash_input.location.string\n   and read into shell_input_line, but have not returned from shell_getc.\n   That is the true input location.  Rewind bash_input.location.string by\n   that number of characters, so it points to the last character actually\n   consumed by the parser. */\nstatic void\nrewind_input_string ()\n{\n  int xchars;\n\n  /* number of unconsumed characters in the input -- XXX need to take newlines\n     into account, e.g., $(...\\n) */\n  xchars = shell_input_line_len - shell_input_line_index;\n  if (bash_input.location.string[-1] == \'\\n\')\n    xchars++;\n\n  /* XXX - how to reflect bash_input.location.string back to string passed to\n     parse_and_execute or xparse_dolparen?  xparse_dolparen needs to know how\n     far into the string we parsed.  parse_and_execute knows where bash_input.\n     location.string is, and how far from orig_string that is -- that\'s the\n     number of characters the command consumed. */\n\n  /* bash_input.location.string - xchars should be where we parsed to */\n  /* need to do more validation on xchars value for sanity -- test cases. */\n  bash_input.location.string -= xchars;\n}\n\n/* **************************************************************** */\n/*\t\t\t\t\t\t\t\t    */\n/*\t\t     Let input come from STREAM.\t\t    */\n/*\t\t\t\t\t\t\t\t    */\n/* **************************************************************** */\n\n/* These two functions used to test the value of the HAVE_RESTARTABLE_SYSCALLS\n   define, and just use getc/ungetc if it was defined, but since bash\n   installs its signal handlers without the SA_RESTART flag, some signals\n   (like SIGCHLD, SIGWINCH, etc.) received during a read(2) will not cause\n   the read to be restarted.  We need to restart it ourselves. */\n\nstatic int\nyy_stream_get ()\n{\n  int result;\n\n  result = EOF;\n  if (bash_input.location.file)\n    {\n#if 0\n      if (interactive)\n\tinterrupt_immediately++;\n#endif\n\n      /* XXX - don\'t need terminate_immediately; getc_with_restart checks\n\t for terminating signals itself if read returns < 0 */\n      result = getc_with_restart (bash_input.location.file);\n\n#if 0\n      if (interactive)\n\tinterrupt_immediately--;\n#endif\n    }\n  return (result);\n}\n\nstatic int\nyy_stream_unget (c)\n     int c;\n{\n  return (ungetc_with_restart (c, bash_input.location.file));\n}\n\nvoid\nwith_input_from_stream (stream, name)\n     FILE *stream;\n     const char *name;\n{\n  INPUT_STREAM location;\n\n  location.file = stream;\n  init_yy_io (yy_stream_get, yy_stream_unget, st_stream, name, location);\n}\n\ntypedef struct stream_saver {\n  struct stream_saver *next;\n  BASH_INPUT bash_input;\n  int line;\n#if defined (BUFFERED_INPUT)\n  BUFFERED_STREAM *bstream;\n#endif /* BUFFERED_INPUT */\n} STREAM_SAVER;\n\n/* The globally known line number. */\nint line_number = 0;\n\n/* The line number offset set by assigning to LINENO.  Not currently used. */\nint line_number_base = 0;\n\n#if defined (COND_COMMAND)\nstatic int cond_lineno;\nstatic int cond_token;\n#endif\n\nSTREAM_SAVER *stream_list = (STREAM_SAVER *)NULL;\n\nvoid\npush_stream (reset_lineno)\n     int reset_lineno;\n{\n  STREAM_SAVER *saver = (STREAM_SAVER *)xmalloc (sizeof (STREAM_SAVER));\n\n  xbcopy ((char *)&bash_input, (char *)&(saver->bash_input), sizeof (BASH_INPUT));\n\n#if defined (BUFFERED_INPUT)\n  saver->bstream = (BUFFERED_STREAM *)NULL;\n  /* If we have a buffered stream, clear out buffers[fd]. */\n  if (bash_input.type == st_bstream && bash_input.location.buffered_fd >= 0)\n    saver->bstream = set_buffered_stream (bash_input.location.buffered_fd,\n    \t\t\t\t\t  (BUFFERED_STREAM *)NULL);\n#endif /* BUFFERED_INPUT */\n\n  saver->line = line_number;\n  bash_input.name = (char *)NULL;\n  saver->next = stream_list;\n  stream_list = saver;\n  EOF_Reached = 0;\n  if (reset_lineno)\n    line_number = 0;\n}\n\nvoid\npop_stream ()\n{\n  if (!stream_list)\n    EOF_Reached = 1;\n  else\n    {\n      STREAM_SAVER *saver = stream_list;\n\n      EOF_Reached = 0;\n      stream_list = stream_list->next;\n\n      init_yy_io (saver->bash_input.getter,\n\t\t  saver->bash_input.ungetter,\n\t\t  saver->bash_input.type,\n\t\t  saver->bash_input.name,\n\t\t  saver->bash_input.location);\n\n#if defined (BUFFERED_INPUT)\n      /* If we have a buffered stream, restore buffers[fd]. */\n      /* If the input file descriptor was changed while this was on the\n\t save stack, update the buffered fd to the new file descriptor and\n\t re-establish the buffer <-> bash_input fd correspondence. */\n      if (bash_input.type == st_bstream && bash_input.location.buffered_fd >= 0)\n\t{\n\t  if (bash_input_fd_changed)\n\t    {\n\t      bash_input_fd_changed = 0;\n\t      if (default_buffered_input >= 0)\n\t\t{\n\t\t  bash_input.location.buffered_fd = default_buffered_input;\n\t\t  saver->bstream->b_fd = default_buffered_input;\n\t\t  SET_CLOSE_ON_EXEC (default_buffered_input);\n\t\t}\n\t    }\n\t  /* XXX could free buffered stream returned as result here. */\n\t  set_buffered_stream (bash_input.location.buffered_fd, saver->bstream);\n\t}\n#endif /* BUFFERED_INPUT */\n\n      line_number = saver->line;\n\n      FREE (saver->bash_input.name);\n      free (saver);\n    }\n}\n\n/* Return 1 if a stream of type TYPE is saved on the stack. */\nint\nstream_on_stack (type)\n     enum stream_type type;\n{\n  register STREAM_SAVER *s;\n\n  for (s = stream_list; s; s = s->next)\n    if (s->bash_input.type == type)\n      return 1;\n  return 0;\n}\n\n/* Save the current token state and return it in a malloced array. */\nint *\nsave_token_state ()\n{\n  int *ret;\n\n  ret = (int *)xmalloc (4 * sizeof (int));\n  ret[0] = last_read_token;\n  ret[1] = token_before_that;\n  ret[2] = two_tokens_ago;\n  ret[3] = current_token;\n  return ret;\n}\n\nvoid\nrestore_token_state (ts)\n     int *ts;\n{\n  if (ts == 0)\n    return;\n  last_read_token = ts[0];\n  token_before_that = ts[1];\n  two_tokens_ago = ts[2];\n  current_token = ts[3];\n}\n\n/*\n * This is used to inhibit alias expansion and reserved word recognition\n * inside case statement pattern lists.  A `case statement pattern list\' is:\n *\n *\teverything between the `in\' in a `case word in\' and the next \')\'\n *\tor `esac\'\n *\teverything between a `;;\' and the next `)\' or `esac\'\n */\n\n#if defined (ALIAS) || defined (DPAREN_ARITHMETIC)\n\n#define END_OF_ALIAS 0\n\n/*\n * Pseudo-global variables used in implementing token-wise alias expansion.\n */\n\n/*\n * Pushing and popping strings.  This works together with shell_getc to\n * implement alias expansion on a per-token basis.\n */\n\n#define PSH_ALIAS\t0x01\n#define PSH_DPAREN\t0x02\n#define PSH_SOURCE\t0x04\n\ntypedef struct string_saver {\n  struct string_saver *next;\n  int expand_alias;  /* Value to set expand_alias to when string is popped. */\n  char *saved_line;\n#if defined (ALIAS)\n  alias_t *expander;   /* alias that caused this line to be pushed. */\n#endif\n  size_t saved_line_size, saved_line_index;\n  int saved_line_terminator;\n  int flags;\n} STRING_SAVER;\n\nSTRING_SAVER *pushed_string_list = (STRING_SAVER *)NULL;\n\n/*\n * Push the current shell_input_line onto a stack of such lines and make S\n * the current input.  Used when expanding aliases.  EXPAND is used to set\n * the value of expand_next_token when the string is popped, so that the\n * word after the alias in the original line is handled correctly when the\n * alias expands to multiple words.  TOKEN is the token that was expanded\n * into S; it is saved and used to prevent infinite recursive expansion.\n */\nstatic void\npush_string (s, expand, ap)\n     char *s;\n     int expand;\n     alias_t *ap;\n{\n  STRING_SAVER *temp = (STRING_SAVER *)xmalloc (sizeof (STRING_SAVER));\n\n  temp->expand_alias = expand;\n  temp->saved_line = shell_input_line;\n  temp->saved_line_size = shell_input_line_size;\n  temp->saved_line_index = shell_input_line_index;\n  temp->saved_line_terminator = shell_input_line_terminator;\n  temp->flags = 0;\n#if defined (ALIAS)\n  temp->expander = ap;\n  if (ap)\n    temp->flags = PSH_ALIAS;\n#endif\n  temp->next = pushed_string_list;\n  pushed_string_list = temp;\n\n#if defined (ALIAS)\n  if (ap)\n    ap->flags |= AL_BEINGEXPANDED;\n#endif\n\n  shell_input_line = s;\n  shell_input_line_size = STRLEN (s);\n  shell_input_line_index = 0;\n  shell_input_line_terminator = \'\\0\';\n#if 0\n  parser_state &= ~PST_ALEXPNEXT;\t/* XXX */\n#endif\n\n  set_line_mbstate ();\n}\n\n/*\n * Make the top of the pushed_string stack be the current shell input.\n * Only called when there is something on the stack.  Called from shell_getc\n * when it thinks it has consumed the string generated by an alias expansion\n * and needs to return to the original input line.\n */\nstatic void\npop_string ()\n{\n  STRING_SAVER *t;\n\n  FREE (shell_input_line);\n  shell_input_line = pushed_string_list->saved_line;\n  shell_input_line_index = pushed_string_list->saved_line_index;\n  shell_input_line_size = pushed_string_list->saved_line_size;\n  shell_input_line_terminator = pushed_string_list->saved_line_terminator;\n\n  if (pushed_string_list->expand_alias)\n    parser_state |= PST_ALEXPNEXT;\n  else\n    parser_state &= ~PST_ALEXPNEXT;\n\n  t = pushed_string_list;\n  pushed_string_list = pushed_string_list->next;\n\n#if defined (ALIAS)\n  if (t->expander)\n    t->expander->flags &= ~AL_BEINGEXPANDED;\n#endif\n\n  free ((char *)t);\n\n  set_line_mbstate ();\n}\n\nstatic void\nfree_string_list ()\n{\n  register STRING_SAVER *t, *t1;\n\n  for (t = pushed_string_list; t; )\n    {\n      t1 = t->next;\n      FREE (t->saved_line);\n#if defined (ALIAS)\n      if (t->expander)\n\tt->expander->flags &= ~AL_BEINGEXPANDED;\n#endif\n      free ((char *)t);\n      t = t1;\n    }\n  pushed_string_list = (STRING_SAVER *)NULL;\n}\n\n#endif /* ALIAS || DPAREN_ARITHMETIC */\n\nvoid\nfree_pushed_string_input ()\n{\n#if defined (ALIAS) || defined (DPAREN_ARITHMETIC)\n  free_string_list ();\n#endif\n}\n\nint\nparser_expanding_alias ()\n{\n  return (expanding_alias ());\n}\n\nvoid\nparser_save_alias ()\n{\n#if defined (ALIAS) || defined (DPAREN_ARITHMETIC)\n  push_string ((char *)NULL, 0, (alias_t *)NULL);\n  pushed_string_list->flags = PSH_SOURCE;\t/* XXX - for now */\n#else\n  ;\n#endif\n}\n\nvoid\nparser_restore_alias ()\n{\n#if defined (ALIAS) || defined (DPAREN_ARITHMETIC)\n  if (pushed_string_list)\n    pop_string ();\n#else\n  ;\n#endif\n}\n\nvoid\nclear_shell_input_line ()\n{\n  if (shell_input_line)\n    shell_input_line[shell_input_line_index = 0] = \'\\0\';\n}\n\n/* Return a line of text, taken from wherever yylex () reads input.\n   If there is no more input, then we return NULL.  If REMOVE_QUOTED_NEWLINE\n   is non-zero, we remove unquoted \\<newline> pairs.  This is used by\n   read_secondary_line to read here documents. */\nstatic char *\nread_a_line (remove_quoted_newline)\n     int remove_quoted_newline;\n{\n  static char *line_buffer = (char *)NULL;\n  static int buffer_size = 0;\n  int indx, c, peekc, pass_next;\n\n#if defined (READLINE)\n  if (no_line_editing && SHOULD_PROMPT ())\n#else\n  if (SHOULD_PROMPT ())\n#endif\n    print_prompt ();\n\n  pass_next = indx = 0;\n  while (1)\n    {\n      /* Allow immediate exit if interrupted during input. */\n      QUIT;\n\n      c = yy_getc ();\n\n      /* Ignore null bytes in input. */\n      if (c == 0)\n\t{\n#if 0\n\t  internal_warning (\"read_a_line: ignored null byte in input\");\n#endif\n\t  continue;\n\t}\n\n      /* If there is no more input, then we return NULL. */\n      if (c == EOF)\n\t{\n\t  if (interactive && bash_input.type == st_stream)\n\t    clearerr (stdin);\n\t  if (indx == 0)\n\t    return ((char *)NULL);\n\t  c = \'\\n\';\n\t}\n\n      /* `+2\' in case the final character in the buffer is a newline. */\n      RESIZE_MALLOCED_BUFFER (line_buffer, indx, 2, buffer_size, 128);\n\n      /* IF REMOVE_QUOTED_NEWLINES is non-zero, we are reading a\n\t here document with an unquoted delimiter.  In this case,\n\t the line will be expanded as if it were in double quotes.\n\t We allow a backslash to escape the next character, but we\n\t need to treat the backslash specially only if a backslash\n\t quoting a backslash-newline pair appears in the line. */\n      if (pass_next)\n\t{\n\t  line_buffer[indx++] = c;\n\t  pass_next = 0;\n\t}\n      else if (c == \'\\\\\' && remove_quoted_newline)\n\t{\n\t  QUIT;\n\t  peekc = yy_getc ();\n\t  if (peekc == \'\\n\')\n\t    {\n\t      line_number++;\n\t      continue;\t/* Make the unquoted \\<newline> pair disappear. */\n\t    }\n\t  else\n\t    {\n\t      yy_ungetc (peekc);\n\t      pass_next = 1;\n\t      line_buffer[indx++] = c;\t\t/* Preserve the backslash. */\n\t    }\n\t}\n      else\n\tline_buffer[indx++] = c;\n\n      if (c == \'\\n\')\n\t{\n\t  line_buffer[indx] = \'\\0\';\n\t  return (line_buffer);\n\t}\n    }\n}\n\n/* Return a line as in read_a_line (), but insure that the prompt is\n   the secondary prompt.  This is used to read the lines of a here\n   document.  REMOVE_QUOTED_NEWLINE is non-zero if we should remove\n   newlines quoted with backslashes while reading the line.  It is\n   non-zero unless the delimiter of the here document was quoted. */\nchar *\nread_secondary_line (remove_quoted_newline)\n     int remove_quoted_newline;\n{\n  char *ret;\n  int n, c;\n\n  prompt_string_pointer = &ps2_prompt;\n  if (SHOULD_PROMPT())\n    prompt_again ();\n  ret = read_a_line (remove_quoted_newline);\n#if defined (HISTORY)\n  if (ret && remember_on_history && (parser_state & PST_HEREDOC))\n    {\n      /* To make adding the here-document body right, we need to rely on\n\t history_delimiting_chars() returning \\n for the first line of the\n\t here-document body and the null string for the second and subsequent\n\t lines, so we avoid double newlines.\n\t current_command_line_count == 2 for the first line of the body. */\n\n      current_command_line_count++;\n      maybe_add_history (ret);\n    }\n#endif /* HISTORY */\n  return ret;\n}\n\n/* **************************************************************** */\n/*\t\t\t\t\t\t\t\t    */\n/*\t\t\t\tYYLEX ()\t\t\t    */\n/*\t\t\t\t\t\t\t\t    */\n/* **************************************************************** */\n\n/* Reserved words.  These are only recognized as the first word of a\n   command. */\nSTRING_INT_ALIST word_token_alist[] = {\n  { \"if\", IF },\n  { \"then\", THEN },\n  { \"else\", ELSE },\n  { \"elif\", ELIF },\n  { \"fi\", FI },\n  { \"case\", CASE },\n  { \"esac\", ESAC },\n  { \"for\", FOR },\n#if defined (SELECT_COMMAND)\n  { \"select\", SELECT },\n#endif\n  { \"while\", WHILE },\n  { \"until\", UNTIL },\n  { \"do\", DO },\n  { \"done\", DONE },\n  { \"in\", IN },\n  { \"function\", FUNCTION },\n#if defined (COMMAND_TIMING)\n  { \"time\", TIME },\n#endif\n  { \"{\", \'{\' },\n  { \"}\", \'}\' },\n  { \"!\", BANG },\n#if defined (COND_COMMAND)\n  { \"[[\", COND_START },\n  { \"]]\", COND_END },\n#endif\n#if defined (COPROCESS_SUPPORT)\n  { \"coproc\", COPROC },\n#endif\n  { (char *)NULL, 0}\n};\n\n/* other tokens that can be returned by read_token() */\nSTRING_INT_ALIST other_token_alist[] = {\n  /* Multiple-character tokens with special values */\n  { \"--\", TIMEIGN },\n  { \"-p\", TIMEOPT },\n  { \"&&\", AND_AND },\n  { \"||\", OR_OR },\n  { \">>\", GREATER_GREATER },\n  { \"<<\", LESS_LESS },\n  { \"<&\", LESS_AND },\n  { \">&\", GREATER_AND },\n  { \";;\", SEMI_SEMI },\n  { \";&\", SEMI_AND },\n  { \";;&\", SEMI_SEMI_AND },\n  { \"<<-\", LESS_LESS_MINUS },\n  { \"<<<\", LESS_LESS_LESS },\n  { \"&>\", AND_GREATER },\n  { \"&>>\", AND_GREATER_GREATER },\n  { \"<>\", LESS_GREATER },\n  { \">|\", GREATER_BAR },\n  { \"|&\", BAR_AND },\n  { \"EOF\", yacc_EOF },\n  /* Tokens whose value is the character itself */\n  { \">\", \'>\' },\n  { \"<\", \'<\' },\n  { \"-\", \'-\' },\n  { \"{\", \'{\' },\n  { \"}\", \'}\' },\n  { \";\", \';\' },\n  { \"(\", \'(\' },\n  { \")\", \')\' },\n  { \"|\", \'|\' },\n  { \"&\", \'&\' },\n  { \"newline\", \'\\n\' },\n  { (char *)NULL, 0}\n};\n\n/* others not listed here:\n\tWORD\t\t\tlook at yylval.word\n\tASSIGNMENT_WORD\t\tlook at yylval.word\n\tNUMBER\t\t\tlook at yylval.number\n\tARITH_CMD\t\tlook at yylval.word_list\n\tARITH_FOR_EXPRS\t\tlook at yylval.word_list\n\tCOND_CMD\t\tlook at yylval.command\n*/\n\n/* These are used by read_token_word, but appear up here so that shell_getc\n   can use them to decide when to add otherwise blank lines to the history. */\n\n/* The primary delimiter stack. */\nstruct dstack dstack = {  (char *)NULL, 0, 0 };\n\n/* A temporary delimiter stack to be used when decoding prompt strings.\n   This is needed because command substitutions in prompt strings (e.g., PS2)\n   can screw up the parser\'s quoting state. */\nstatic struct dstack temp_dstack = { (char *)NULL, 0, 0 };\n\n/* Macro for accessing the top delimiter on the stack.  Returns the\n   delimiter or zero if none. */\n#define current_delimiter(ds) \\\n  (ds.delimiter_depth ? ds.delimiters[ds.delimiter_depth - 1] : 0)\n\n#define push_delimiter(ds, character) \\\n  do \\\n    { \\\n      if (ds.delimiter_depth + 2 > ds.delimiter_space) \\\n\tds.delimiters = (char *)xrealloc \\\n\t  (ds.delimiters, (ds.delimiter_space += 10) * sizeof (char)); \\\n      ds.delimiters[ds.delimiter_depth] = character; \\\n      ds.delimiter_depth++; \\\n    } \\\n  while (0)\n\n#define pop_delimiter(ds)\tds.delimiter_depth--\n\n/* Return the next shell input character.  This always reads characters\n   from shell_input_line; when that line is exhausted, it is time to\n   read the next line.  This is called by read_token when the shell is\n   processing normal command input. */\n\n/* This implements one-character lookahead/lookbehind across physical input\n   lines, to avoid something being lost because it\'s pushed back with\n   shell_ungetc when we\'re at the start of a line. */\nstatic int eol_ungetc_lookahead = 0;\n\nstatic int\nshell_getc (remove_quoted_newline)\n     int remove_quoted_newline;\n{\n  register int i;\n  int c, truncating, last_was_backslash;\n  unsigned char uc;\n\n  QUIT;\n\n  last_was_backslash = 0;\n  if (sigwinch_received)\n    {\n      sigwinch_received = 0;\n      get_new_window_size (0, (int *)0, (int *)0);\n    }\n      \n  if (eol_ungetc_lookahead)\n    {\n      c = eol_ungetc_lookahead;\n      eol_ungetc_lookahead = 0;\n      return (c);\n    }\n\n#if defined (ALIAS) || defined (DPAREN_ARITHMETIC)\n  /* If shell_input_line[shell_input_line_index] == 0, but there is\n     something on the pushed list of strings, then we don\'t want to go\n     off and get another line.  We let the code down below handle it. */\n\n  if (!shell_input_line || ((!shell_input_line[shell_input_line_index]) &&\n\t\t\t    (pushed_string_list == (STRING_SAVER *)NULL)))\n#else /* !ALIAS && !DPAREN_ARITHMETIC */\n  if (!shell_input_line || !shell_input_line[shell_input_line_index])\n#endif /* !ALIAS && !DPAREN_ARITHMETIC */\n    {\n      line_number++;\n\n      /* Let\'s not let one really really long line blow up memory allocation */\n      if (shell_input_line && shell_input_line_size >= 32768)\n\t{\n\t  free (shell_input_line);\n\t  shell_input_line = 0;\n\t  shell_input_line_size = 0;\n\t}\n\n    restart_read:\n\n      /* Allow immediate exit if interrupted during input. */\n      QUIT;\n\n      i = truncating = 0;\n      shell_input_line_terminator = 0;\n\n      /* If the shell is interatctive, but not currently printing a prompt\n         (interactive_shell && interactive == 0), we don\'t want to print\n         notifies or cleanup the jobs -- we want to defer it until we do\n         print the next prompt. */\n      if (interactive_shell == 0 || SHOULD_PROMPT())\n\t{\n#if defined (JOB_CONTROL)\n      /* This can cause a problem when reading a command as the result\n\t of a trap, when the trap is called from flush_child.  This call\n\t had better not cause jobs to disappear from the job table in\n\t that case, or we will have big trouble. */\n\t  notify_and_cleanup ();\n#else /* !JOB_CONTROL */\n\t  cleanup_dead_jobs ();\n#endif /* !JOB_CONTROL */\n\t}\n\n#if defined (READLINE)\n      if (no_line_editing && SHOULD_PROMPT())\n#else\n      if (SHOULD_PROMPT())\n#endif\n\tprint_prompt ();\n\n      if (bash_input.type == st_stream)\n\tclearerr (stdin);\n\n      while (1)\n\t{\n\t  c = yy_getc ();\n\n\t  /* Allow immediate exit if interrupted during input. */\n\t  QUIT;\n\n\t  if (c == \'\\0\')\n\t    {\n#if 0\n\t      internal_warning (\"shell_getc: ignored null byte in input\");\n#endif\n\t      continue;\n\t    }\n\n\t  /* Theoretical overflow */\n\t  /* If we can\'t put 256 bytes more into the buffer, allocate\n\t     everything we can and fill it as full as we can. */\n\t  /* XXX - we ignore rest of line using `truncating\' flag */\n\t  if (shell_input_line_size > (SIZE_MAX - 256))\n\t    {\n\t      size_t n;\n\n\t      n = SIZE_MAX - i;\t/* how much more can we put into the buffer? */\n\t      if (n <= 2)\t/* we have to save 1 for the newline added below */\n\t\t{\n\t\t  if (truncating == 0)\n\t\t    internal_warning(_(\"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line truncated\"), shell_input_line_size, (unsigned long)SIZE_MAX);\n\t\t  shell_input_line[i] = \'\\0\';\n\t\t  truncating = 1;\n\t\t}\n\t      if (shell_input_line_size < SIZE_MAX)\n\t\t{\n\t\t  shell_input_line_size = SIZE_MAX;\n\t\t  shell_input_line = xrealloc (shell_input_line, shell_input_line_size);\n\t\t}\n\t    }\n\t  else\n\t    RESIZE_MALLOCED_BUFFER (shell_input_line, i, 2, shell_input_line_size, 256);\n\n\t  if (c == EOF)\n\t    {\n\t      if (bash_input.type == st_stream)\n\t\tclearerr (stdin);\n\n\t      if (i == 0)\n\t\tshell_input_line_terminator = EOF;\n\n\t      shell_input_line[i] = \'\\0\';\n\t      break;\n\t    }\n\n\t  if (truncating == 0 || c == \'\\n\')\n\t    shell_input_line[i++] = c;\n\n\t  if (c == \'\\n\')\n\t    {\n\t      shell_input_line[--i] = \'\\0\';\n\t      current_command_line_count++;\n\t      break;\n\t    }\n\n\t  last_was_backslash = last_was_backslash == 0 && c == \'\\\\\';\n\t}\n\n      shell_input_line_index = 0;\n      shell_input_line_len = i;\t\t/* == strlen (shell_input_line) */\n\n      set_line_mbstate ();\n\n#if defined (HISTORY)\n      if (remember_on_history && shell_input_line && shell_input_line[0])\n\t{\n\t  char *expansions;\n#  if defined (BANG_HISTORY)\n\t  int old_hist;\n\n\t  /* If the current delimiter is a single quote, we should not be\n\t     performing history expansion, even if we\'re on a different\n\t     line from the original single quote. */\n\t  old_hist = history_expansion_inhibited;\n\t  if (current_delimiter (dstack) == \'\\\'\')\n\t    history_expansion_inhibited = 1;\n#  endif\n\t  /* Calling with a third argument of 1 allows remember_on_history to\n\t     determine whether or not the line is saved to the history list */\n\t  expansions = pre_process_line (shell_input_line, 1, 1);\n#  if defined (BANG_HISTORY)\n\t  history_expansion_inhibited = old_hist;\n#  endif\n\t  if (expansions != shell_input_line)\n\t    {\n\t      free (shell_input_line);\n\t      shell_input_line = expansions;\n\t      shell_input_line_len = shell_input_line ?\n\t\t\t\t\tstrlen (shell_input_line) : 0;\n\t      if (shell_input_line_len == 0)\n\t\tcurrent_command_line_count--;\n\n\t      /* We have to force the xrealloc below because we don\'t know\n\t\t the true allocated size of shell_input_line anymore. */\n\t      shell_input_line_size = shell_input_line_len;\n\n\t      set_line_mbstate ();\n\t    }\n\t}\n      /* Try to do something intelligent with blank lines encountered while\n\t entering multi-line commands.  XXX - this is grotesque */\n      else if (remember_on_history && shell_input_line &&\n\t       shell_input_line[0] == \'\\0\' &&\n\t       current_command_line_count > 1)\n\t{\n\t  if (current_delimiter (dstack))\n\t    /* We know shell_input_line[0] == 0 and we\'re reading some sort of\n\t       quoted string.  This means we\'ve got a line consisting of only\n\t       a newline in a quoted string.  We want to make sure this line\n\t       gets added to the history. */\n\t    maybe_add_history (shell_input_line);\n\t  else\n\t    {\n\t      char *hdcs;\n\t      hdcs = history_delimiting_chars (shell_input_line);\n\t      if (hdcs && hdcs[0] == \';\')\n\t\tmaybe_add_history (shell_input_line);\n\t    }\n\t}\n\n#endif /* HISTORY */\n\n      if (shell_input_line)\n\t{\n\t  /* Lines that signify the end of the shell\'s input should not be\n\t     echoed.  We should not echo lines while parsing command\n\t     substitutions with recursive calls into the parsing engine; those\n\t     should only be echoed once when we read the word.  That is the\n\t     reason for the test against shell_eof_token, which is set to a\n\t     right paren when parsing the contents of command substitutions. */\n\t  if (echo_input_at_read && (shell_input_line[0] ||\n\t\t\t\t       shell_input_line_terminator != EOF) &&\n\t\t\t\t     shell_eof_token == 0)\n\t    fprintf (stderr, \"%s\\n\", shell_input_line);\n\t}\n      else\n\t{\n\t  shell_input_line_size = 0;\n\t  prompt_string_pointer = &current_prompt_string;\n\t  if (SHOULD_PROMPT ())\n\t    prompt_again ();\n\t  goto restart_read;\n\t}\n\n      /* Add the newline to the end of this string, iff the string does\n\t not already end in an EOF character.  */\n      if (shell_input_line_terminator != EOF)\n\t{\n\t  if (shell_input_line_size < SIZE_MAX-3 && (shell_input_line_len+3 > shell_input_line_size))\n\t    shell_input_line = (char *)xrealloc (shell_input_line,\n\t\t\t\t\t1 + (shell_input_line_size += 2));\n\n\t  /* Don\'t add a newline to a string that ends with a backslash if we\'re\n\t     going to be removing quoted newlines, since that will eat the\n\t     backslash.  Add another backslash instead (will be removed by\n\t     word expansion). */\n\t  if (bash_input.type == st_string && expanding_alias() == 0 && last_was_backslash && c == EOF && remove_quoted_newline)\n\t    shell_input_line[shell_input_line_len] = \'\\\\\';\n\t  else\n\t    shell_input_line[shell_input_line_len] = \'\\n\';\n\t  shell_input_line[shell_input_line_len + 1] = \'\\0\';\n\n\t  set_line_mbstate ();\n\t}\n    }\n\nnext_alias_char:\n  uc = shell_input_line[shell_input_line_index];\n\n  if (uc)\n    shell_input_line_index++;\n\n#if defined (ALIAS) || defined (DPAREN_ARITHMETIC)\n  /* If UC is NULL, we have reached the end of the current input string.  If\n     pushed_string_list is non-empty, it\'s time to pop to the previous string\n     because we have fully consumed the result of the last alias expansion.\n     Do it transparently; just return the next character of the string popped\n     to. */\n  /* If pushed_string_list != 0 but pushed_string_list->expander == 0 (not\n     currently tested) and the flags value is not PSH_SOURCE, we are not\n     parsing an alias, we have just saved one (push_string, when called by\n     the parse_dparen code) In this case, just go on as well.  The PSH_SOURCE\n     case is handled below. */\npop_alias:\n  if (uc == 0 && pushed_string_list && pushed_string_list->flags != PSH_SOURCE)\n    {\n      pop_string ();\n      uc = shell_input_line[shell_input_line_index];\n      if (uc)\n\tshell_input_line_index++;\n    }\n#endif /* ALIAS || DPAREN_ARITHMETIC */\n\n  if MBTEST(uc == \'\\\\\' && remove_quoted_newline && shell_input_line[shell_input_line_index] == \'\\n\')\n    {\n\tif (SHOULD_PROMPT ())\n\t  prompt_again ();\n\tline_number++;\n\t/* What do we do here if we\'re expanding an alias whose definition\n\t   includes an escaped newline?  If that\'s the last character in the\n\t   alias expansion, we just pop the pushed string list (recall that\n\t   we inhibit the appending of a space in mk_alexpansion() if newline\n\t   is the last character).  If it\'s not the last character, we need\n\t   to consume the quoted newline and move to the next character in\n\t   the expansion. */\n#if defined (ALIAS)\n\tif (expanding_alias () && shell_input_line[shell_input_line_index+1] == \'\\0\')\n\t  {\n\t    uc = 0;\n\t    goto pop_alias;\n\t  }\n\telse if (expanding_alias () && shell_input_line[shell_input_line_index+1] != \'\\0\')\n\t  {\n\t    shell_input_line_index++;\t/* skip newline */\n\t    goto next_alias_char;\t/* and get next character */\n\t  }\n\telse\n#endif \n\t  goto restart_read;\n    }\n\n  if (uc == 0 && shell_input_line_terminator == EOF)\n    return ((shell_input_line_index != 0) ? \'\\n\' : EOF);\n\n#if defined (ALIAS) || defined (DPAREN_ARITHMETIC)\n  /* We already know that we are not parsing an alias expansion because of the\n     check for expanding_alias() above.  This knows how parse_and_execute\n     handles switching to st_string input while an alias is being expanded,\n     hence the check for pushed_string_list without pushed_string_list->expander\n     and the check for PSH_SOURCE as pushed_string_list->flags.\n     parse_and_execute and parse_string both change the input type to st_string\n     and place the string to be parsed and executed into location.string, so\n     we should not stop reading that until the pointer is \'\\0\'.\n     The check for shell_input_line_terminator may be superfluous.\n\n     This solves the problem of `.\' inside a multi-line alias with embedded\n     newlines executing things out of order. */\n  if (uc == 0 && bash_input.type == st_string && *bash_input.location.string &&\n      pushed_string_list && pushed_string_list->flags == PSH_SOURCE &&\n      shell_input_line_terminator == 0)\n    {\n      shell_input_line_index = 0;\n      goto restart_read;\n    }\n#endif\n\n  return (uc);\n}\n\n/* Put C back into the input for the shell.  This might need changes for\n   HANDLE_MULTIBYTE around EOLs.  Since we (currently) never push back a\n   character different than we read, shell_input_line_property doesn\'t need\n   to change when manipulating shell_input_line.  The define for\n   last_shell_getc_is_singlebyte should take care of it, though. */\nstatic void\nshell_ungetc (c)\n     int c;\n{\n  if (shell_input_line && shell_input_line_index)\n    shell_input_line[--shell_input_line_index] = c;\n  else\n    eol_ungetc_lookahead = c;\n}\n\nchar *\nparser_remaining_input ()\n{\n  if (shell_input_line == 0)\n    return 0;\n  if (shell_input_line_index < 0 || shell_input_line_index >= shell_input_line_len)\n    return \"\";\t/* XXX */\n  return (shell_input_line + shell_input_line_index);\n}\n\n#ifdef INCLUDE_UNUSED\n/* Back the input pointer up by one, effectively `ungetting\' a character. */\nstatic void\nshell_ungetchar ()\n{\n  if (shell_input_line && shell_input_line_index)\n    shell_input_line_index--;\n}\n#endif\n\n/* Discard input until CHARACTER is seen, then push that character back\n   onto the input stream. */\nstatic void\ndiscard_until (character)\n     int character;\n{\n  int c;\n\n  while ((c = shell_getc (0)) != EOF && c != character)\n    ;\n\n  if (c != EOF)\n    shell_ungetc (c);\n}\n\nvoid\nexecute_variable_command (command, vname)\n     char *command, *vname;\n{\n  char *last_lastarg;\n  sh_parser_state_t ps;\n\n  save_parser_state (&ps);\n  last_lastarg = get_string_value (\"_\");\n  if (last_lastarg)\n    last_lastarg = savestring (last_lastarg);\n\n  parse_and_execute (savestring (command), vname, SEVAL_NONINT|SEVAL_NOHIST);\n\n  restore_parser_state (&ps);\n  bind_variable (\"_\", last_lastarg, 0);\n  FREE (last_lastarg);\n\n  if (token_to_read == \'\\n\')\t/* reset_parser was called */\n    token_to_read = 0;\n}\n\nvoid\npush_token (x)\n     int x;\n{\n  two_tokens_ago = token_before_that;\n  token_before_that = last_read_token;\n  last_read_token = current_token;\n\n  current_token = x;\n}\n\n/* Place to remember the token.  We try to keep the buffer\n   at a reasonable size, but it can grow. */\nstatic char *token = (char *)NULL;\n\n/* Current size of the token buffer. */\nstatic int token_buffer_size;\n\n/* Command to read_token () explaining what we want it to do. */\n#define READ 0\n#define RESET 1\n#define prompt_is_ps1 \\\n      (!prompt_string_pointer || prompt_string_pointer == &ps1_prompt)\n\n/* Function for yyparse to call.  yylex keeps track of\n   the last two tokens read, and calls read_token.  */\nstatic int\nyylex ()\n{\n  if (interactive && (current_token == 0 || current_token == \'\\n\'))\n    {\n      /* Before we print a prompt, we might have to check mailboxes.\n\t We do this only if it is time to do so. Notice that only here\n\t is the mail alarm reset; nothing takes place in check_mail ()\n\t except the checking of mail.  Please don\'t change this. */\n      if (prompt_is_ps1 && parse_and_execute_level == 0 && time_to_check_mail ())\n\t{\n\t  check_mail ();\n\t  reset_mail_timer ();\n\t}\n\n      /* Avoid printing a prompt if we\'re not going to read anything, e.g.\n\t after resetting the parser with read_token (RESET). */\n      if (token_to_read == 0 && SHOULD_PROMPT ())\n\tprompt_again ();\n    }\n\n  two_tokens_ago = token_before_that;\n  token_before_that = last_read_token;\n  last_read_token = current_token;\n  current_token = read_token (READ);\n\n  if ((parser_state & PST_EOFTOKEN) && current_token == shell_eof_token)\n    {\n      current_token = yacc_EOF;\n      if (bash_input.type == st_string)\n\trewind_input_string ();\n    }\n  parser_state &= ~PST_EOFTOKEN;\n\n  return (current_token);\n}\n\n/* When non-zero, we have read the required tokens\n   which allow ESAC to be the next one read. */\nstatic int esacs_needed_count;\n\nstatic void\npush_heredoc (r)\n     REDIRECT *r;\n{\n  if (need_here_doc >= HEREDOC_MAX)\n    {\n      last_command_exit_value = EX_BADUSAGE;\n      need_here_doc = 0;\n      report_syntax_error (_(\"maximum here-document count exceeded\"));\n      reset_parser ();\n      exit_shell (last_command_exit_value);\n    }\n  redir_stack[need_here_doc++] = r;\n}\n\nvoid\ngather_here_documents ()\n{\n  int r;\n\n  r = 0;\n  here_doc_first_line = 1;\n  while (need_here_doc > 0)\n    {\n      parser_state |= PST_HEREDOC;\n      make_here_document (redir_stack[r++], line_number);\n      parser_state &= ~PST_HEREDOC;\n      need_here_doc--;\n      redir_stack[r - 1] = 0;\t\t/* XXX */\n    }\n  here_doc_first_line = 0;\t\t/* just in case */\n}\n\n/* When non-zero, an open-brace used to create a group is awaiting a close\n   brace partner. */\nstatic int open_brace_count;\n\n/* In the following three macros, `token\' is always last_read_token */\n\n/* Are we in the middle of parsing a redirection where we are about to read\n   a word?  This is used to make sure alias expansion doesn\'t happen in the\n   middle of a redirection, even though we\'re parsing a simple command. */\n#define parsing_redirection(token) \\\n  (token == \'<\' || token == \'>\' || \\\n   token == GREATER_GREATER || token == GREATER_BAR || \\\n   token == LESS_GREATER || token == LESS_LESS_MINUS || \\\n   token == LESS_LESS || token == LESS_LESS_LESS || \\\n   token == LESS_AND || token == GREATER_AND || token == AND_GREATER)\n\n/* Is `token\' one that will allow a WORD to be read in a command position?\n   We can read a simple command name on which we should attempt alias expansion\n   or we can read an assignment statement. */\n#define command_token_position(token) \\\n  (((token) == ASSIGNMENT_WORD) || \\\n   ((parser_state&PST_REDIRLIST) && parsing_redirection(token) == 0) || \\\n   ((token) != SEMI_SEMI && (token) != SEMI_AND && (token) != SEMI_SEMI_AND && reserved_word_acceptable(token)))\n\n/* Are we in a position where we can read an assignment statement? */\n#define assignment_acceptable(token) \\\n  (command_token_position(token) && ((parser_state & PST_CASEPAT) == 0))\n\n/* Check to see if TOKEN is a reserved word and return the token\n   value if it is. */\n#define CHECK_FOR_RESERVED_WORD(tok) \\\n  do { \\\n    if (!dollar_present && !quoted && \\\n\treserved_word_acceptable (last_read_token)) \\\n      { \\\n\tint i; \\\n\tfor (i = 0; word_token_alist[i].word != (char *)NULL; i++) \\\n\t  if (STREQ (tok, word_token_alist[i].word)) \\\n\t    { \\\n\t      if ((parser_state & PST_CASEPAT) && (word_token_alist[i].token != ESAC)) \\\n\t\tbreak; \\\n\t      if (word_token_alist[i].token == TIME && time_command_acceptable () == 0) \\\n\t\tbreak; \\\n\t      if ((parser_state & PST_CASEPAT) && last_read_token == \'|\' && word_token_alist[i].token == ESAC) \\\n\t\tbreak; /* Posix grammar rule 4 */ \\\n\t      if (word_token_alist[i].token == ESAC) \\\n\t\tparser_state &= ~(PST_CASEPAT|PST_CASESTMT); \\\n\t      else if (word_token_alist[i].token == CASE) \\\n\t\tparser_state |= PST_CASESTMT; \\\n\t      else if (word_token_alist[i].token == COND_END) \\\n\t\tparser_state &= ~(PST_CONDCMD|PST_CONDEXPR); \\\n\t      else if (word_token_alist[i].token == COND_START) \\\n\t\tparser_state |= PST_CONDCMD; \\\n\t      else if (word_token_alist[i].token == \'{\') \\\n\t\topen_brace_count++; \\\n\t      else if (word_token_alist[i].token == \'}\' && open_brace_count) \\\n\t\topen_brace_count--; \\\n\t      return (word_token_alist[i].token); \\\n\t    } \\\n      } \\\n  } while (0)\n\n#if defined (ALIAS)\n\n    /* OK, we have a token.  Let\'s try to alias expand it, if (and only if)\n       it\'s eligible.\n\n       It is eligible for expansion if EXPAND_ALIASES is set, and\n       the token is unquoted and the last token read was a command\n       separator (or expand_next_token is set), and we are currently\n       processing an alias (pushed_string_list is non-empty) and this\n       token is not the same as the current or any previously\n       processed alias.\n\n       Special cases that disqualify:\n\t In a pattern list in a case statement (parser_state & PST_CASEPAT). */\n\nstatic char *\nmk_alexpansion (s)\n     char *s;\n{\n  int l;\n  char *r;\n\n  l = strlen (s);\n  r = xmalloc (l + 2);\n  strcpy (r, s);\n  /* If the last character in the alias is a newline, don\'t add a trailing\n     space to the expansion.  Works with shell_getc above. */\n  if (r[l - 1] != \' \' && r[l - 1] != \'\\n\' && shellmeta(r[l - 1]) == 0)\n    r[l++] = \' \';\n  r[l] = \'\\0\';\n  return r;\n}\n\nstatic int\nalias_expand_token (tokstr)\n     char *tokstr;\n{\n  char *expanded;\n  alias_t *ap;\n\n  if (((parser_state & PST_ALEXPNEXT) || command_token_position (last_read_token)) &&\n\t(parser_state & PST_CASEPAT) == 0)\n    {\n      ap = find_alias (tokstr);\n\n      /* Currently expanding this token. */\n      if (ap && (ap->flags & AL_BEINGEXPANDED))\n\treturn (NO_EXPANSION);\n\n      /* mk_alexpansion puts an extra space on the end of the alias expansion,\n         so the lookahead by the parser works right.  If this gets changed,\n         make sure the code in shell_getc that deals with reaching the end of\n         an expanded alias is changed with it. */\n      expanded = ap ? mk_alexpansion (ap->value) : (char *)NULL;\n\n      if (expanded)\n\t{\n\t  push_string (expanded, ap->flags & AL_EXPANDNEXT, ap);\n\t  return (RE_READ_TOKEN);\n\t}\n      else\n\t/* This is an eligible token that does not have an expansion. */\n\treturn (NO_EXPANSION);\n    }\n  return (NO_EXPANSION);\n}\n#endif /* ALIAS */\n\nstatic int\ntime_command_acceptable ()\n{\n#if defined (COMMAND_TIMING)\n  int i;\n\n  if (posixly_correct && shell_compatibility_level > 41)\n    {\n      /* Quick check of the rest of the line to find the next token.  If it\n\t begins with a `-\', Posix says to not return `time\' as the token.\n\t This was interp 267. */\n      i = shell_input_line_index;\n      while (i < shell_input_line_len && (shell_input_line[i] == \' \' || shell_input_line[i] == \'\\t\'))\n        i++;\n      if (shell_input_line[i] == \'-\')\n\treturn 0;\n    }\n\n  switch (last_read_token)\n    {\n    case 0:\n    case \';\':\n    case \'\\n\':\n      if (token_before_that == \'|\')\n\treturn (0);\n      /* FALLTHROUGH */\n    case AND_AND:\n    case OR_OR:\n    case \'&\':\n    case WHILE:\n    case DO:\n    case UNTIL:\n    case IF:\n    case THEN:\n    case ELIF:\n    case ELSE:\n    case \'{\':\t\t/* } */\n    case \'(\':\t\t/* )( */\n    case \')\':\t\t/* only valid in case statement */\n    case BANG:\t\t/* ! time pipeline */\n    case TIME:\t\t/* time time pipeline */\n    case TIMEOPT:\t/* time -p time pipeline */\n    case TIMEIGN:\t/* time -p -- ... */\n      return 1;\n    default:\n      return 0;\n    }\n#else\n  return 0;\n#endif /* COMMAND_TIMING */\n}\n\n/* Handle special cases of token recognition:\n\tIN is recognized if the last token was WORD and the token\n\tbefore that was FOR or CASE or SELECT.\n\n\tDO is recognized if the last token was WORD and the token\n\tbefore that was FOR or SELECT.\n\n\tESAC is recognized if the last token caused `esacs_needed_count\'\n\tto be set\n\n\t`{\' is recognized if the last token as WORD and the token\n\tbefore that was FUNCTION, or if we just parsed an arithmetic\n\t`for\' command.\n\n\t`}\' is recognized if there is an unclosed `{\' present.\n\n\t`-p\' is returned as TIMEOPT if the last read token was TIME.\n\t`--\' is returned as TIMEIGN if the last read token was TIMEOPT.\n\n\t\']]\' is returned as COND_END if the parser is currently parsing\n\ta conditional expression ((parser_state & PST_CONDEXPR) != 0)\n\n\t`time\' is returned as TIME if and only if it is immediately\n\tpreceded by one of `;\', `\\n\', `||\', `&&\', or `&\'.\n*/\n\nstatic int\nspecial_case_tokens (tokstr)\n     char *tokstr;\n{\n  if ((last_read_token == WORD) &&\n#if defined (SELECT_COMMAND)\n      ((token_before_that == FOR) || (token_before_that == CASE) || (token_before_that == SELECT)) &&\n#else\n      ((token_before_that == FOR) || (token_before_that == CASE)) &&\n#endif\n      (tokstr[0] == \'i\' && tokstr[1] == \'n\' && tokstr[2] == 0))\n    {\n      if (token_before_that == CASE)\n\t{\n\t  parser_state |= PST_CASEPAT;\n\t  esacs_needed_count++;\n\t}\n      return (IN);\n    }\n\n  if (last_read_token == WORD &&\n#if defined (SELECT_COMMAND)\n      (token_before_that == FOR || token_before_that == SELECT) &&\n#else\n      (token_before_that == FOR) &&\n#endif\n      (tokstr[0] == \'d\' && tokstr[1] == \'o\' && tokstr[2] == \'\\0\'))\n    return (DO);\n\n  /* Ditto for ESAC in the CASE case.\n     Specifically, this handles \"case word in esac\", which is a legal\n     construct, certainly because someone will pass an empty arg to the\n     case construct, and we don\'t want it to barf.  Of course, we should\n     insist that the case construct has at least one pattern in it, but\n     the designers disagree. */\n  if (esacs_needed_count)\n    {\n      esacs_needed_count--;\n      if (STREQ (tokstr, \"esac\"))\n\t{\n\t  parser_state &= ~PST_CASEPAT;\n\t  return (ESAC);\n\t}\n    }\n\n  /* The start of a shell function definition. */\n  if (parser_state & PST_ALLOWOPNBRC)\n    {\n      parser_state &= ~PST_ALLOWOPNBRC;\n      if (tokstr[0] == \'{\' && tokstr[1] == \'\\0\')\t\t/* } */\n\t{\n\t  open_brace_count++;\n\t  function_bstart = line_number;\n\t  return (\'{\');\t\t\t\t\t/* } */\n\t}\n    }\n\n  /* We allow a `do\' after a for ((...)) without an intervening\n     list_terminator */\n  if (last_read_token == ARITH_FOR_EXPRS && tokstr[0] == \'d\' && tokstr[1] == \'o\' && !tokstr[2])\n    return (DO);\n  if (last_read_token == ARITH_FOR_EXPRS && tokstr[0] == \'{\' && tokstr[1] == \'\\0\')\t/* } */\n    {\n      open_brace_count++;\n      return (\'{\');\t\t\t/* } */\n    }\n\n  if (open_brace_count && reserved_word_acceptable (last_read_token) && tokstr[0] == \'}\' && !tokstr[1])\n    {\n      open_brace_count--;\t\t/* { */\n      return (\'}\');\n    }\n\n#if defined (COMMAND_TIMING)\n  /* Handle -p after `time\'. */\n  if (last_read_token == TIME && tokstr[0] == \'-\' && tokstr[1] == \'p\' && !tokstr[2])\n    return (TIMEOPT);\n  /* Handle -- after `time -p\'. */\n  if (last_read_token == TIMEOPT && tokstr[0] == \'-\' && tokstr[1] == \'-\' && !tokstr[2])\n    return (TIMEIGN);\n#endif\n\n#if defined (COND_COMMAND) /* [[ */\n  if ((parser_state & PST_CONDEXPR) && tokstr[0] == \']\' && tokstr[1] == \']\' && tokstr[2] == \'\\0\')\n    return (COND_END);\n#endif\n\n  return (-1);\n}\n\n/* Called from shell.c when Control-C is typed at top level.  Or\n   by the error rule at top level. */\nvoid\nreset_parser ()\n{\n  dstack.delimiter_depth = 0;\t/* No delimiters found so far. */\n  open_brace_count = 0;\n\n#if defined (EXTENDED_GLOB)\n  /* Reset to global value of extended glob */\n  if (parser_state & PST_EXTPAT)\n    extended_glob = global_extglob;\n#endif\n\n  parser_state = 0;\n  here_doc_first_line = 0;\n\n#if defined (ALIAS) || defined (DPAREN_ARITHMETIC)\n  if (pushed_string_list)\n    free_string_list ();\n#endif /* ALIAS || DPAREN_ARITHMETIC */\n\n  /* This is where we resynchronize to the next newline on error/reset */\n  if (shell_input_line)\n    {\n      free (shell_input_line);\n      shell_input_line = (char *)NULL;\n      shell_input_line_size = shell_input_line_index = 0;\n    }\n\n  FREE (word_desc_to_read);\n  word_desc_to_read = (WORD_DESC *)NULL;\n\n  eol_ungetc_lookahead = 0;\n\n  current_token = \'\\n\';\t\t/* XXX */\n  last_read_token = \'\\n\';\n  token_to_read = \'\\n\';\n}\n\n/* Read the next token.  Command can be READ (normal operation) or\n   RESET (to normalize state). */\nstatic int\nread_token (command)\n     int command;\n{\n  int character;\t\t/* Current character. */\n  int peek_char;\t\t/* Temporary look-ahead character. */\n  int result;\t\t\t/* The thing to return. */\n\n  if (command == RESET)\n    {\n      reset_parser ();\n      return (\'\\n\');\n    }\n\n  if (token_to_read)\n    {\n      result = token_to_read;\n      if (token_to_read == WORD || token_to_read == ASSIGNMENT_WORD)\n\t{\n\t  yylval.word = word_desc_to_read;\n\t  word_desc_to_read = (WORD_DESC *)NULL;\n\t}\n      token_to_read = 0;\n      return (result);\n    }\n\n#if defined (COND_COMMAND)\n  if ((parser_state & (PST_CONDCMD|PST_CONDEXPR)) == PST_CONDCMD)\n    {\n      cond_lineno = line_number;\n      parser_state |= PST_CONDEXPR;\n      yylval.command = parse_cond_command ();\n      if (cond_token != COND_END)\n\t{\n\t  cond_error ();\n\t  return (-1);\n\t}\n      token_to_read = COND_END;\n      parser_state &= ~(PST_CONDEXPR|PST_CONDCMD);\n      return (COND_CMD);\n    }\n#endif\n\n#if defined (ALIAS)\n  /* This is a place to jump back to once we have successfully expanded a\n     token with an alias and pushed the string with push_string () */\n re_read_token:\n#endif /* ALIAS */\n\n  /* Read a single word from input.  Start by skipping blanks. */\n  while ((character = shell_getc (1)) != EOF && shellblank (character))\n    ;\n\n  if (character == EOF)\n    {\n      EOF_Reached = 1;\n      return (yacc_EOF);\n    }\n\n  if MBTEST(character == \'#\' && (!interactive || interactive_comments))\n    {\n      /* A comment.  Discard until EOL or EOF, and then return a newline. */\n      discard_until (\'\\n\');\n      shell_getc (0);\n      character = \'\\n\';\t/* this will take the next if statement and return. */\n    }\n\n  if (character == \'\\n\')\n    {\n      /* If we\'re about to return an unquoted newline, we can go and collect\n\t the text of any pending here document. */\n      if (need_here_doc)\n\tgather_here_documents ();\n\n#if defined (ALIAS)\n      parser_state &= ~PST_ALEXPNEXT;\n#endif /* ALIAS */\n\n      parser_state &= ~PST_ASSIGNOK;\n\n      return (character);\n    }\n\n  if (parser_state & PST_REGEXP)\n    goto tokword;\n\n  /* Shell meta-characters. */\n  if MBTEST(shellmeta (character) && ((parser_state & PST_DBLPAREN) == 0))\n    {\n#if defined (ALIAS)\n      /* Turn off alias tokenization iff this character sequence would\n\t not leave us ready to read a command. */\n      if (character == \'<\' || character == \'>\')\n\tparser_state &= ~PST_ALEXPNEXT;\n#endif /* ALIAS */\n\n      parser_state &= ~PST_ASSIGNOK;\n\n      /* If we are parsing a command substitution and we have read a character\n\t that marks the end of it, don\'t bother to skip over quoted newlines\n\t when we read the next token. We\'re just interested in a character\n\t that will turn this into a two-character token, so we let the higher\n\t layers deal with quoted newlines following the command substitution. */\n      if ((parser_state & PST_CMDSUBST) && character == shell_eof_token)\n\tpeek_char = shell_getc (0);\n      else\n\tpeek_char = shell_getc (1);\n\n      if (character == peek_char)\n\t{\n\t  switch (character)\n\t    {\n\t    case \'<\':\n\t      /* If \'<\' then we could be at \"<<\" or at \"<<-\".  We have to\n\t\t look ahead one more character. */\n\t      peek_char = shell_getc (1);\n\t      if MBTEST(peek_char == \'-\')\n\t\treturn (LESS_LESS_MINUS);\n\t      else if MBTEST(peek_char == \'<\')\n\t\treturn (LESS_LESS_LESS);\n\t      else\n\t\t{\n\t\t  shell_ungetc (peek_char);\n\t\t  return (LESS_LESS);\n\t\t}\n\n\t    case \'>\':\n\t      return (GREATER_GREATER);\n\n\t    case \';\':\n\t      parser_state |= PST_CASEPAT;\n#if defined (ALIAS)\n\t      parser_state &= ~PST_ALEXPNEXT;\n#endif /* ALIAS */\n\n\t      peek_char = shell_getc (1);\n\t      if MBTEST(peek_char == \'&\')\n\t\treturn (SEMI_SEMI_AND);\n\t      else\n\t\t{\n\t\t  shell_ungetc (peek_char);\n\t\t  return (SEMI_SEMI);\n\t\t}\n\n\t    case \'&\':\n\t      return (AND_AND);\n\n\t    case \'|\':\n\t      return (OR_OR);\n\n#if defined (DPAREN_ARITHMETIC) || defined (ARITH_FOR_COMMAND)\n\t    case \'(\':\t\t/* ) */\n\t      result = parse_dparen (character);\n\t      if (result == -2)\n\t        break;\n\t      else\n\t        return result;\n#endif\n\t    }\n\t}\n      else if MBTEST(character == \'<\' && peek_char == \'&\')\n\treturn (LESS_AND);\n      else if MBTEST(character == \'>\' && peek_char == \'&\')\n\treturn (GREATER_AND);\n      else if MBTEST(character == \'<\' && peek_char == \'>\')\n\treturn (LESS_GREATER);\n      else if MBTEST(character == \'>\' && peek_char == \'|\')\n\treturn (GREATER_BAR);\n      else if MBTEST(character == \'&\' && peek_char == \'>\')\n\t{\n\t  peek_char = shell_getc (1);\n\t  if MBTEST(peek_char == \'>\')\n\t    return (AND_GREATER_GREATER);\n\t  else\n\t    {\n\t      shell_ungetc (peek_char);\n\t      return (AND_GREATER);\n\t    }\n\t}\n      else if MBTEST(character == \'|\' && peek_char == \'&\')\n\treturn (BAR_AND);\n      else if MBTEST(character == \';\' && peek_char == \'&\')\n\t{\n\t  parser_state |= PST_CASEPAT;\n#if defined (ALIAS)\n\t  parser_state &= ~PST_ALEXPNEXT;\n#endif /* ALIAS */\n\t  return (SEMI_AND);\n\t}\n\n      shell_ungetc (peek_char);\n\n      /* If we look like we are reading the start of a function\n\t definition, then let the reader know about it so that\n\t we will do the right thing with `{\'. */\n      if MBTEST(character == \')\' && last_read_token == \'(\' && token_before_that == WORD)\n\t{\n\t  parser_state |= PST_ALLOWOPNBRC;\n#if defined (ALIAS)\n\t  parser_state &= ~PST_ALEXPNEXT;\n#endif /* ALIAS */\n\t  function_dstart = line_number;\n\t}\n\n      /* case pattern lists may be preceded by an optional left paren.  If\n\t we\'re not trying to parse a case pattern list, the left paren\n\t indicates a subshell. */\n      if MBTEST(character == \'(\' && (parser_state & PST_CASEPAT) == 0) /* ) */\n\tparser_state |= PST_SUBSHELL;\n      /*(*/\n      else if MBTEST((parser_state & PST_CASEPAT) && character == \')\')\n\tparser_state &= ~PST_CASEPAT;\n      /*(*/\n      else if MBTEST((parser_state & PST_SUBSHELL) && character == \')\')\n\tparser_state &= ~PST_SUBSHELL;\n\n#if defined (PROCESS_SUBSTITUTION)\n      /* Check for the constructs which introduce process substitution.\n\t Shells running in `posix mode\' don\'t do process substitution. */\n      if MBTEST(posixly_correct || ((character != \'>\' && character != \'<\') || peek_char != \'(\')) /*)*/\n#endif /* PROCESS_SUBSTITUTION */\n\treturn (character);\n    }\n\n  /* Hack <&- (close stdin) case.  Also <&N- (dup and close). */\n  if MBTEST(character == \'-\' && (last_read_token == LESS_AND || last_read_token == GREATER_AND))\n    return (character);\n\ntokword:\n  /* Okay, if we got this far, we have to read a word.  Read one,\n     and then check it against the known ones. */\n  result = read_token_word (character);\n#if defined (ALIAS)\n  if (result == RE_READ_TOKEN)\n    goto re_read_token;\n#endif\n  return result;\n}\n\n/*\n * Match a $(...) or other grouping construct.  This has to handle embedded\n * quoted strings (\'\', ``, \"\") and nested constructs.  It also must handle\n * reprompting the user, if necessary, after reading a newline, and returning\n * correct error values if it reads EOF.\n */\n#define P_FIRSTCLOSE\t0x0001\n#define P_ALLOWESC\t0x0002\n#define P_DQUOTE\t0x0004\n#define P_COMMAND\t0x0008\t/* parsing a command, so look for comments */\n#define P_BACKQUOTE\t0x0010\t/* parsing a backquoted command substitution */\n#define P_ARRAYSUB\t0x0020\t/* parsing a [...] array subscript for assignment */\n#define P_DOLBRACE\t0x0040\t/* parsing a ${...} construct */\n\n/* Lexical state while parsing a grouping construct or $(...). */\n#define LEX_WASDOL\t0x001\n#define LEX_CKCOMMENT\t0x002\n#define LEX_INCOMMENT\t0x004\n#define LEX_PASSNEXT\t0x008\n#define LEX_RESWDOK\t0x010\n#define LEX_CKCASE\t0x020\n#define LEX_INCASE\t0x040\n#define LEX_INHEREDOC\t0x080\n#define LEX_HEREDELIM\t0x100\t\t/* reading here-doc delimiter */\n#define LEX_STRIPDOC\t0x200\t\t/* <<- strip tabs from here doc delim */\n#define LEX_QUOTEDDOC\t0x400\t\t/* here doc with quoted delim */\n#define LEX_INWORD\t0x800\n\n#define COMSUB_META(ch)\t\t((ch) == \';\' || (ch) == \'&\' || (ch) == \'|\')\n\n#define CHECK_NESTRET_ERROR() \\\n  do { \\\n    if (nestret == &matched_pair_error) \\\n      { \\\n\tfree (ret); \\\n\treturn &matched_pair_error; \\\n      } \\\n  } while (0)\n\n#define APPEND_NESTRET() \\\n  do { \\\n    if (nestlen) \\\n      { \\\n\tRESIZE_MALLOCED_BUFFER (ret, retind, nestlen, retsize, 64); \\\n\tstrcpy (ret + retind, nestret); \\\n\tretind += nestlen; \\\n      } \\\n  } while (0)\n\nstatic char matched_pair_error;\n\nstatic char *\nparse_matched_pair (qc, open, close, lenp, flags)\n     int qc;\t/* `\"\' if this construct is within double quotes */\n     int open, close;\n     int *lenp, flags;\n{\n  int count, ch, tflags;\n  int nestlen, ttranslen, start_lineno;\n  char *ret, *nestret, *ttrans;\n  int retind, retsize, rflags;\n  int dolbrace_state;\n\n  dolbrace_state = (flags & P_DOLBRACE) ? DOLBRACE_PARAM : 0;\n\n/*itrace(\"parse_matched_pair[%d]: open = %c close = %c flags = %d\", line_number, open, close, flags);*/\n  count = 1;\n  tflags = 0;\n\n  if ((flags & P_COMMAND) && qc != \'`\' && qc != \'\\\'\' && qc != \'\"\' && (flags & P_DQUOTE) == 0)\n    tflags |= LEX_CKCOMMENT;\n\n  /* RFLAGS is the set of flags we want to pass to recursive calls. */\n  rflags = (qc == \'\"\') ? P_DQUOTE : (flags & P_DQUOTE);\n\n  ret = (char *)xmalloc (retsize = 64);\n  retind = 0;\n\n  start_lineno = line_number;\n  while (count)\n    {\n      ch = shell_getc (qc != \'\\\'\' && (tflags & (LEX_PASSNEXT)) == 0);\n\n      if (ch == EOF)\n\t{\n\t  free (ret);\n\t  parser_error (start_lineno, _(\"unexpected EOF while looking for matching `%c\'\"), close);\n\t  EOF_Reached = 1;\t/* XXX */\n\t  return (&matched_pair_error);\n\t}\n\n      /* Possible reprompting. */\n      if (ch == \'\\n\' && SHOULD_PROMPT ())\n\tprompt_again ();\n\n      /* Don\'t bother counting parens or doing anything else if in a comment\n\t or part of a case statement */\n      if (tflags & LEX_INCOMMENT)\n\t{\n\t  /* Add this character. */\n\t  RESIZE_MALLOCED_BUFFER (ret, retind, 1, retsize, 64);\n\t  ret[retind++] = ch;\n\n\t  if (ch == \'\\n\')\n\t    tflags &= ~LEX_INCOMMENT;\n\n\t  continue;\n\t}\n\n      /* Not exactly right yet, should handle shell metacharacters, too.  If\n\t any changes are made to this test, make analogous changes to subst.c:\n\t extract_delimited_string(). */\n      else if MBTEST((tflags & LEX_CKCOMMENT) && (tflags & LEX_INCOMMENT) == 0 && ch == \'#\' && (retind == 0 || ret[retind-1] == \'\\n\' || shellblank (ret[retind - 1])))\n\ttflags |= LEX_INCOMMENT;\n\n      if (tflags & LEX_PASSNEXT)\t\t/* last char was backslash */\n\t{\n\t  tflags &= ~LEX_PASSNEXT;\n\t  if (qc != \'\\\'\' && ch == \'\\n\')\t/* double-quoted \\<newline> disappears. */\n\t    {\n\t      if (retind > 0)\n\t\tretind--;\t/* swallow previously-added backslash */\n\t      continue;\n\t    }\n\n\t  RESIZE_MALLOCED_BUFFER (ret, retind, 2, retsize, 64);\n\t  if MBTEST(ch == CTLESC)\n\t    ret[retind++] = CTLESC;\n\t  ret[retind++] = ch;\n\t  continue;\n\t}\n      /* If we\'re reparsing the input (e.g., from parse_string_to_word_list),\n\t we\'ve already prepended CTLESC to single-quoted results of $\'...\'.\n\t We may want to do this for other CTLESC-quoted characters in\n\t reparse, too. */\n      else if MBTEST((parser_state & PST_REPARSE) && open == \'\\\'\' && (ch == CTLESC || ch == CTLNUL))\n\t{\n\t  RESIZE_MALLOCED_BUFFER (ret, retind, 1, retsize, 64);\n\t  ret[retind++] = ch;\n\t  continue;\n\t}\n      else if MBTEST(ch == CTLESC || ch == CTLNUL)\t/* special shell escapes */\n\t{\n\t  RESIZE_MALLOCED_BUFFER (ret, retind, 2, retsize, 64);\n\t  ret[retind++] = CTLESC;\n\t  ret[retind++] = ch;\n\t  continue;\n\t}\n      else if MBTEST(ch == close)\t\t/* ending delimiter */\n\tcount--;\n      /* handle nested ${...} specially. */\n      else if MBTEST(open != close && (tflags & LEX_WASDOL) && open == \'{\' && ch == open) /* } */\n\tcount++;\n      else if MBTEST(((flags & P_FIRSTCLOSE) == 0) && ch == open)\t/* nested begin */\n\tcount++;\n\n      /* Add this character. */\n      RESIZE_MALLOCED_BUFFER (ret, retind, 1, retsize, 64);\n      ret[retind++] = ch;\n\n      /* If we just read the ending character, don\'t bother continuing. */\n      if (count == 0)\n\tbreak;\n\n      if (open == \'\\\'\')\t\t\t/* \'\' inside grouping construct */\n\t{\n\t  if MBTEST((flags & P_ALLOWESC) && ch == \'\\\\\')\n\t    tflags |= LEX_PASSNEXT;\n\t  continue;\n\t}\n\n      if MBTEST(ch == \'\\\\\')\t\t\t/* backslashes */\n\ttflags |= LEX_PASSNEXT;\n\n      /* Based on which dolstate is currently in (param, op, or word),\n\t decide what the op is.  We\'re really only concerned if it\'s % or\n\t #, so we can turn on a flag that says whether or not we should\n\t treat single quotes as special when inside a double-quoted\n\t ${...}. This logic must agree with subst.c:extract_dollar_brace_string\n\t since they share the same defines. */\n      /* FLAG POSIX INTERP 221 */\n      if (flags & P_DOLBRACE)\n        {\n          /* ${param%[%]word} */\n\t  if MBTEST(dolbrace_state == DOLBRACE_PARAM && ch == \'%\' && retind > 1)\n\t    dolbrace_state = DOLBRACE_QUOTE;\n          /* ${param#[#]word} */\n\t  else if MBTEST(dolbrace_state == DOLBRACE_PARAM && ch == \'#\' && retind > 1)\n\t    dolbrace_state = DOLBRACE_QUOTE;\n          /* ${param/[/]pat/rep} */\n\t  else if MBTEST(dolbrace_state == DOLBRACE_PARAM && ch == \'/\' && retind > 1)\n\t    dolbrace_state = DOLBRACE_QUOTE2;\t/* XXX */\n          /* ${param^[^]pat} */\n\t  else if MBTEST(dolbrace_state == DOLBRACE_PARAM && ch == \'^\' && retind > 1)\n\t    dolbrace_state = DOLBRACE_QUOTE;\n          /* ${param,[,]pat} */\n\t  else if MBTEST(dolbrace_state == DOLBRACE_PARAM && ch == \',\' && retind > 1)\n\t    dolbrace_state = DOLBRACE_QUOTE;\n\t  else if MBTEST(dolbrace_state == DOLBRACE_PARAM && strchr (\"#%^,~:-=?+/\", ch) != 0)\n\t    dolbrace_state = DOLBRACE_OP;\n\t  else if MBTEST(dolbrace_state == DOLBRACE_OP && strchr (\"#%^,~:-=?+/\", ch) == 0)\n\t    dolbrace_state = DOLBRACE_WORD;\n        }\n\n      /* The big hammer.  Single quotes aren\'t special in double quotes.  The\n         problem is that Posix used to say the single quotes are semi-special:\n         within a double-quoted ${...} construct \"an even number of\n         unescaped double-quotes or single-quotes, if any, shall occur.\" */\n      /* This was changed in Austin Group Interp 221 */\n      if MBTEST(posixly_correct && shell_compatibility_level > 41 && dolbrace_state != DOLBRACE_QUOTE && dolbrace_state != DOLBRACE_QUOTE2 && (flags & P_DQUOTE) && (flags & P_DOLBRACE) && ch == \'\\\'\')\n\tcontinue;\n\n      /* Could also check open == \'`\' if we want to parse grouping constructs\n\t inside old-style command substitution. */\n      if (open != close)\t\t/* a grouping construct */\n\t{\n\t  if MBTEST(shellquote (ch))\n\t    {\n\t      /* \'\', ``, or \"\" inside $(...) or other grouping construct. */\n\t      push_delimiter (dstack, ch);\n\t      if MBTEST((tflags & LEX_WASDOL) && ch == \'\\\'\')\t/* $\'...\' inside group */\n\t\tnestret = parse_matched_pair (ch, ch, ch, &nestlen, P_ALLOWESC|rflags);\n\t      else\n\t\tnestret = parse_matched_pair (ch, ch, ch, &nestlen, rflags);\n\t      pop_delimiter (dstack);\n\t      CHECK_NESTRET_ERROR ();\n\n\t      if MBTEST((tflags & LEX_WASDOL) && ch == \'\\\'\' && (extended_quote || (rflags & P_DQUOTE) == 0))\n\t\t{\n\t\t  /* Translate $\'...\' here. */\n\t\t  ttrans = ansiexpand (nestret, 0, nestlen - 1, &ttranslen);\n\t\t  xfree (nestret);\n\n\t\t  /* If we\'re parsing a double-quoted brace expansion and we are\n\t\t     not in a place where single quotes are treated specially,\n\t\t     make sure we single-quote the results of the ansi\n\t\t     expansion because quote removal should remove them later */\n\t\t  /* FLAG POSIX INTERP 221 */\n\t\t  if ((shell_compatibility_level > 42) && (rflags & P_DQUOTE) && (dolbrace_state == DOLBRACE_QUOTE2) && (flags & P_DOLBRACE))\n\t\t    {\n\t\t      nestret = sh_single_quote (ttrans);\n\t\t      free (ttrans);\n\t\t      nestlen = strlen (nestret);\n\t\t    }\n\t\t  else if ((rflags & P_DQUOTE) == 0)\n\t\t    {\n\t\t      nestret = sh_single_quote (ttrans);\n\t\t      free (ttrans);\n\t\t      nestlen = strlen (nestret);\n\t\t    }\n\t\t  else\n\t\t    {\n\t\t      nestret = ttrans;\n\t\t      nestlen = ttranslen;\n\t\t    }\n\t\t  retind -= 2;\t\t/* back up before the $\' */\n\t\t}\n\t      else if MBTEST((tflags & LEX_WASDOL) && ch == \'\"\' && (extended_quote || (rflags & P_DQUOTE) == 0))\n\t\t{\n\t\t  /* Locale expand $\"...\" here. */\n\t\t  ttrans = localeexpand (nestret, 0, nestlen - 1, start_lineno, &ttranslen);\n\t\t  xfree (nestret);\n\n\t\t  nestret = sh_mkdoublequoted (ttrans, ttranslen, 0);\n\t\t  free (ttrans);\n\t\t  nestlen = ttranslen + 2;\n\t\t  retind -= 2;\t\t/* back up before the $\" */\n\t\t}\n\n\t      APPEND_NESTRET ();\n\t      FREE (nestret);\n\t    }\n\t  else if ((flags & (P_ARRAYSUB|P_DOLBRACE)) && (tflags & LEX_WASDOL) && (ch == \'(\' || ch == \'{\' || ch == \'[\'))\t/* ) } ] */\n\t    goto parse_dollar_word;\n\t}\n      /* Parse an old-style command substitution within double quotes as a\n\t single word. */\n      /* XXX - sh and ksh93 don\'t do this - XXX */\n      else if MBTEST(open == \'\"\' && ch == \'`\')\n\t{\n\t  nestret = parse_matched_pair (0, \'`\', \'`\', &nestlen, rflags);\n\n\t  CHECK_NESTRET_ERROR ();\n\t  APPEND_NESTRET ();\n\n\t  FREE (nestret);\n\t}\n      else if MBTEST(open != \'`\' && (tflags & LEX_WASDOL) && (ch == \'(\' || ch == \'{\' || ch == \'[\'))\t/* ) } ] */\n\t/* check for $(), $[], or ${} inside quoted string. */\n\t{\nparse_dollar_word:\n\t  if (open == ch)\t/* undo previous increment */\n\t    count--;\n\t  if (ch == \'(\')\t\t/* ) */\n\t    nestret = parse_comsub (0, \'(\', \')\', &nestlen, (rflags|P_COMMAND) & ~P_DQUOTE);\n\t  else if (ch == \'{\')\t\t/* } */\n\t    nestret = parse_matched_pair (0, \'{\', \'}\', &nestlen, P_FIRSTCLOSE|P_DOLBRACE|rflags);\n\t  else if (ch == \'[\')\t\t/* ] */\n\t    nestret = parse_matched_pair (0, \'[\', \']\', &nestlen, rflags);\n\n\t  CHECK_NESTRET_ERROR ();\n\t  APPEND_NESTRET ();\n\n\t  FREE (nestret);\n\t}\n      if MBTEST(ch == \'$\')\n\ttflags |= LEX_WASDOL;\n      else\n\ttflags &= ~LEX_WASDOL;\n    }\n\n  ret[retind] = \'\\0\';\n  if (lenp)\n    *lenp = retind;\n/*itrace(\"parse_matched_pair[%d]: returning %s\", line_number, ret);*/\n  return ret;\n}\n\n#if defined (DEBUG)\nstatic void\ndump_tflags (flags)\n     int flags;\n{\n  int f;\n\n  f = flags;\n  fprintf (stderr, \"%d -> \", f);\n  if (f & LEX_WASDOL)\n    {\n      f &= ~LEX_WASDOL;\n      fprintf (stderr, \"LEX_WASDOL%s\", f ? \"|\" : \"\");\n    }\n  if (f & LEX_CKCOMMENT)\n    {\n      f &= ~LEX_CKCOMMENT;\n      fprintf (stderr, \"LEX_CKCOMMENT%s\", f ? \"|\" : \"\");\n    }\n  if (f & LEX_INCOMMENT)\n    {\n      f &= ~LEX_INCOMMENT;\n      fprintf (stderr, \"LEX_INCOMMENT%s\", f ? \"|\" : \"\");\n    }\n  if (f & LEX_PASSNEXT)\n    {\n      f &= ~LEX_PASSNEXT;\n      fprintf (stderr, \"LEX_PASSNEXT%s\", f ? \"|\" : \"\");\n    }\n  if (f & LEX_RESWDOK)\n    {\n      f &= ~LEX_RESWDOK;\n      fprintf (stderr, \"LEX_RESWDOK%s\", f ? \"|\" : \"\");\n    }\n  if (f & LEX_CKCASE)\n    {\n      f &= ~LEX_CKCASE;\n      fprintf (stderr, \"LEX_CKCASE%s\", f ? \"|\" : \"\");\n    }\n  if (f & LEX_INCASE)\n    {\n      f &= ~LEX_INCASE;\n      fprintf (stderr, \"LEX_INCASE%s\", f ? \"|\" : \"\");\n    }\n  if (f & LEX_INHEREDOC)\n    {\n      f &= ~LEX_INHEREDOC;\n      fprintf (stderr, \"LEX_INHEREDOC%s\", f ? \"|\" : \"\");\n    }\n  if (f & LEX_HEREDELIM)\n    {\n      f &= ~LEX_HEREDELIM;\n      fprintf (stderr, \"LEX_HEREDELIM%s\", f ? \"|\" : \"\");\n    }\n  if (f & LEX_STRIPDOC)\n    {\n      f &= ~LEX_STRIPDOC;\n      fprintf (stderr, \"LEX_WASDOL%s\", f ? \"|\" : \"\");\n    }\n  if (f & LEX_QUOTEDDOC)\n    {\n      f &= ~LEX_QUOTEDDOC;\n      fprintf (stderr, \"LEX_QUOTEDDOC%s\", f ? \"|\" : \"\");\n    }\n  if (f & LEX_INWORD)\n    {\n      f &= ~LEX_INWORD;\n      fprintf (stderr, \"LEX_INWORD%s\", f ? \"|\" : \"\");\n    }\n\n  fprintf (stderr, \"\\n\");\n  fflush (stderr);\n}\n#endif\n\n/* Parse a $(...) command substitution.  This is messier than I\'d like, and\n   reproduces a lot more of the token-reading code than I\'d like. */\nstatic char *\nparse_comsub (qc, open, close, lenp, flags)\n     int qc;\t/* `\"\' if this construct is within double quotes */\n     int open, close;\n     int *lenp, flags;\n{\n  int count, ch, peekc, tflags, lex_rwlen, lex_wlen, lex_firstind;\n  int nestlen, ttranslen, start_lineno;\n  char *ret, *nestret, *ttrans, *heredelim;\n  int retind, retsize, rflags, hdlen;\n\n  /* Posix interp 217 says arithmetic expressions have precedence, so\n     assume $(( introduces arithmetic expansion and parse accordingly. */\n  peekc = shell_getc (0);\n  shell_ungetc (peekc);\n  if (peekc == \'(\')\n    return (parse_matched_pair (qc, open, close, lenp, 0));\n\n/*itrace(\"parse_comsub: qc = `%c\' open = %c close = %c\", qc, open, close);*/\n  count = 1;\n  tflags = LEX_RESWDOK;\n\n  if ((flags & P_COMMAND) && qc != \'\\\'\' && qc != \'\"\' && (flags & P_DQUOTE) == 0)\n    tflags |= LEX_CKCASE;\n  if ((tflags & LEX_CKCASE) && (interactive == 0 || interactive_comments))\n    tflags |= LEX_CKCOMMENT;\n\n  /* RFLAGS is the set of flags we want to pass to recursive calls. */\n  rflags = (flags & P_DQUOTE);\n\n  ret = (char *)xmalloc (retsize = 64);\n  retind = 0;\n\n  start_lineno = line_number;\n  lex_rwlen = lex_wlen = 0;\n\n  heredelim = 0;\n  lex_firstind = -1;\n\n  while (count)\n    {\ncomsub_readchar:\n      ch = shell_getc (qc != \'\\\'\' && (tflags & (LEX_INCOMMENT|LEX_PASSNEXT)) == 0);\n\n      if (ch == EOF)\n\t{\neof_error:\n\t  free (ret);\n\t  FREE (heredelim);\n\t  parser_error (start_lineno, _(\"unexpected EOF while looking for matching `%c\'\"), close);\n\t  EOF_Reached = 1;\t/* XXX */\n\t  return (&matched_pair_error);\n\t}\n\n      /* If we hit the end of a line and are reading the contents of a here\n\t document, and it\'s not the same line that the document starts on,\n\t check for this line being the here doc delimiter.  Otherwise, if\n\t we\'re in a here document, mark the next character as the beginning\n\t of a line. */\n      if (ch == \'\\n\')\n\t{\n\t  if ((tflags & LEX_HEREDELIM) && heredelim)\n\t    {\n\t      tflags &= ~LEX_HEREDELIM;\n\t      tflags |= LEX_INHEREDOC;\n\t      lex_firstind = retind + 1;\n\t    }\n\t  else if (tflags & LEX_INHEREDOC)\n\t    {\n\t      int tind;\n\t      tind = lex_firstind;\n\t      while ((tflags & LEX_STRIPDOC) && ret[tind] == \'\\t\')\n\t\ttind++;\n\t      if (STREQN (ret + tind, heredelim, hdlen))\n\t\t{\n\t\t  tflags &= ~(LEX_STRIPDOC|LEX_INHEREDOC|LEX_QUOTEDDOC);\n/*itrace(\"parse_comsub:%d: found here doc end `%s\'\", line_number, ret + tind);*/\n\t\t  free (heredelim);\n\t\t  heredelim = 0;\n\t\t  lex_firstind = -1;\n\t\t}\n\t      else\n\t\tlex_firstind = retind + 1;\n\t    }\n\t}\n\n      /* Possible reprompting. */\n      if (ch == \'\\n\' && SHOULD_PROMPT ())\n\tprompt_again ();\n\n      /* XXX -- possibly allow here doc to be delimited by ending right\n\t paren. */\n      if ((tflags & LEX_INHEREDOC) && ch == close && count == 1)\n\t{\n\t  int tind;\n/*itrace(\"parse_comsub:%d: in here doc, ch == close, retind - firstind = %d hdlen = %d retind = %d\", line_number, retind-lex_firstind, hdlen, retind);*/\n\t  tind = lex_firstind;\n\t  while ((tflags & LEX_STRIPDOC) && ret[tind] == \'\\t\')\n\t    tind++;\n\t  if (retind-tind == hdlen && STREQN (ret + tind, heredelim, hdlen))\n\t    {\n\t      tflags &= ~(LEX_STRIPDOC|LEX_INHEREDOC|LEX_QUOTEDDOC);\n/*itrace(\"parse_comsub:%d: found here doc end `%*s\'\", line_number, hdlen, ret + tind);*/\n\t      free (heredelim);\n\t      heredelim = 0;\n\t      lex_firstind = -1;\n\t    }\n\t}\n\n      /* Don\'t bother counting parens or doing anything else if in a comment or\n\t here document (not exactly right for here-docs -- if we want to allow\n\t recursive calls to parse_comsub to have their own here documents,\n\t change the LEX_INHEREDOC to LEX_QUOTEDDOC here and uncomment the next\n\t clause below.  Note that to make this work completely, we need to make\n\t additional changes to allow xparse_dolparen to work right when the\n\t command substitution is parsed, because read_secondary_line doesn\'t know\n\t to recursively parse through command substitutions embedded in here-\n\t documents */\n      if (tflags & (LEX_INCOMMENT|LEX_INHEREDOC))\n\t{\n\t  /* Add this character. */\n\t  RESIZE_MALLOCED_BUFFER (ret, retind, 1, retsize, 64);\n\t  ret[retind++] = ch;\n\n\t  if ((tflags & LEX_INCOMMENT) && ch == \'\\n\')\n\t    {\n/*itrace(\"parse_comsub:%d: lex_incomment -> 0 ch = `%c\'\", line_number, ch);*/\n\t      tflags &= ~LEX_INCOMMENT;\n\t    }\n\n\t  continue;\n\t}\n#if 0\n      /* If we\'re going to recursively parse a command substitution inside a\n\t here-document, make sure we call parse_comsub recursively below.  See\n\t above for additional caveats. */\n      if ((tflags & LEX_INHEREDOC) && ((tflags & LEX_WASDOL) == 0 || ch != \'(\')) /*)*/\n\t{\n\t  /* Add this character. */\n\t  RESIZE_MALLOCED_BUFFER (ret, retind, 1, retsize, 64);\n\t  ret[retind++] = ch;\n\t  if MBTEST(ch == \'$\')\n\t    tflags |= LEX_WASDOL;\n\t  else\n\t    tflags &= ~LEX_WASDOL;\n\t}\n#endif\n\n      if (tflags & LEX_PASSNEXT)\t\t/* last char was backslash */\n\t{\n/*itrace(\"parse_comsub:%d: lex_passnext -> 0 ch = `%c\' (%d)\", line_number, ch, __LINE__);*/\n\t  tflags &= ~LEX_PASSNEXT;\n\t  if (qc != \'\\\'\' && ch == \'\\n\')\t/* double-quoted \\<newline> disappears. */\n\t    {\n\t      if (retind > 0)\n\t\tretind--;\t/* swallow previously-added backslash */\n\t      continue;\n\t    }\n\n\t  RESIZE_MALLOCED_BUFFER (ret, retind, 2, retsize, 64);\n\t  if MBTEST(ch == CTLESC)\n\t    ret[retind++] = CTLESC;\n\t  ret[retind++] = ch;\n\t  continue;\n\t}\n\n      /* If this is a shell break character, we are not in a word.  If not,\n\t we either start or continue a word. */\n      if MBTEST(shellbreak (ch))\n\t{\n\t  tflags &= ~LEX_INWORD;\n/*itrace(\"parse_comsub:%d: lex_inword -> 0 ch = `%c\' (%d)\", line_number, ch, __LINE__);*/\n\t}\n      else\n\t{\n\t  if (tflags & LEX_INWORD)\n\t    {\n\t      lex_wlen++;\n/*itrace(\"parse_comsub:%d: lex_inword == 1 ch = `%c\' lex_wlen = %d (%d)\", line_number, ch, lex_wlen, __LINE__);*/\n\t    }\t      \n\t  else\n\t    {\n/*itrace(\"parse_comsub:%d: lex_inword -> 1 ch = `%c\' (%d)\", line_number, ch, __LINE__);*/\n\t      tflags |= LEX_INWORD;\n\t      lex_wlen = 0;\n\t      if (tflags & LEX_RESWDOK)\n\t\tlex_rwlen = 0;\n\t    }\n\t}\n\n      /* Skip whitespace */\n      if MBTEST(shellblank (ch) && (tflags & LEX_HEREDELIM) == 0 && lex_rwlen == 0)\n        {\n\t  /* Add this character. */\n\t  RESIZE_MALLOCED_BUFFER (ret, retind, 1, retsize, 64);\n\t  ret[retind++] = ch;\n\t  continue;\n        }\n\n      /* Either we are looking for the start of the here-doc delimiter\n\t (lex_firstind == -1) or we are reading one (lex_firstind >= 0).\n\t If this character is a shell break character and we are reading\n\t the delimiter, save it and note that we are now reading a here\n\t document.  If we\'ve found the start of the delimiter, note it by\n\t setting lex_firstind.  Backslashes can quote shell metacharacters\n\t in here-doc delimiters. */\n      if (tflags & LEX_HEREDELIM)\n\t{\n\t  if (lex_firstind == -1 && shellbreak (ch) == 0)\n\t    lex_firstind = retind;\n#if 0\n\t  else if (heredelim && (tflags & LEX_PASSNEXT) == 0 && ch == \'\\n\')\n\t    {\n\t      tflags |= LEX_INHEREDOC;\n\t      tflags &= ~LEX_HEREDELIM;\n\t      lex_firstind = retind + 1;\n\t    }\n#endif\n\t  else if (lex_firstind >= 0 && (tflags & LEX_PASSNEXT) == 0 && shellbreak (ch))\n\t    {\n\t      if (heredelim == 0)\n\t\t{\n\t\t  nestret = substring (ret, lex_firstind, retind);\n\t\t  heredelim = string_quote_removal (nestret, 0);\n\t\t  hdlen = STRLEN(heredelim);\n/*itrace(\"parse_comsub:%d: found here doc delimiter `%s\' (%d)\", line_number, heredelim, hdlen);*/\n\t\t  if (STREQ (heredelim, nestret) == 0)\n\t\t    tflags |= LEX_QUOTEDDOC;\n\t\t  free (nestret);\n\t\t}\n\t      if (ch == \'\\n\')\n\t\t{\n\t\t  tflags |= LEX_INHEREDOC;\n\t\t  tflags &= ~LEX_HEREDELIM;\n\t\t  lex_firstind = retind + 1;\n\t\t}\n\t      else\n\t\tlex_firstind = -1;\n\t    }\n\t}\n\n      /* Meta-characters that can introduce a reserved word.  Not perfect yet. */\n      if MBTEST((tflags & LEX_RESWDOK) == 0 && (tflags & LEX_CKCASE) && (tflags & LEX_INCOMMENT) == 0 && (shellmeta(ch) || ch == \'\\n\'))\n\t{\n\t  /* Add this character. */\n\t  RESIZE_MALLOCED_BUFFER (ret, retind, 1, retsize, 64);\n\t  ret[retind++] = ch;\n\t  peekc = shell_getc (1);\n\t  if (ch == peekc && (ch == \'&\' || ch == \'|\' || ch == \';\'))\t/* two-character tokens */\n\t    {\n\t      RESIZE_MALLOCED_BUFFER (ret, retind, 1, retsize, 64);\n\t      ret[retind++] = peekc;\n/*itrace(\"parse_comsub:%d: set lex_reswordok = 1, ch = `%c\'\", line_number, ch);*/\n\t      tflags |= LEX_RESWDOK;\n\t      lex_rwlen = 0;\n\t      continue;\n\t    }\n\t  else if (ch == \'\\n\' || COMSUB_META(ch))\n\t    {\n\t      shell_ungetc (peekc);\n/*itrace(\"parse_comsub:%d: set lex_reswordok = 1, ch = `%c\'\", line_number, ch);*/\n\t      tflags |= LEX_RESWDOK;\n\t      lex_rwlen = 0;\n\t      continue;\n\t    }\n\t  else if (ch == EOF)\n\t    goto eof_error;\n\t  else\n\t    {\n\t      /* `unget\' the character we just added and fall through */\n\t      retind--;\n\t      shell_ungetc (peekc);\n\t    }\n\t}\n\n      /* If we can read a reserved word, try to read one. */\n      if (tflags & LEX_RESWDOK)\n\t{\n\t  if MBTEST(islower ((unsigned char)ch))\n\t    {\n\t      /* Add this character. */\n\t      RESIZE_MALLOCED_BUFFER (ret, retind, 1, retsize, 64);\n\t      ret[retind++] = ch;\n\t      lex_rwlen++;\n\t      continue;\n\t    }\n\t  else if MBTEST(lex_rwlen == 4 && shellbreak (ch))\n\t    {\n\t      if (STREQN (ret + retind - 4, \"case\", 4))\n\t\t{\n\t\t  tflags |= LEX_INCASE;\n\t\t  tflags &= ~LEX_RESWDOK;\n/*itrace(\"parse_comsub:%d: found `case\', lex_incase -> 1 lex_reswdok -> 0\", line_number);*/\n\t\t}\n\t      else if (STREQN (ret + retind - 4, \"esac\", 4))\n\t\t{\n\t\t  tflags &= ~LEX_INCASE;\n/*itrace(\"parse_comsub:%d: found `esac\', lex_incase -> 0 lex_reswdok -> 1\", line_number);*/\n\t\t  tflags |= LEX_RESWDOK;\n\t\t  lex_rwlen = 0;\n\t\t}\n\t      else if (STREQN (ret + retind - 4, \"done\", 4) ||\n\t\t       STREQN (ret + retind - 4, \"then\", 4) ||\n\t\t       STREQN (ret + retind - 4, \"else\", 4) ||\n\t\t       STREQN (ret + retind - 4, \"elif\", 4) ||\n\t\t       STREQN (ret + retind - 4, \"time\", 4))\n\t\t{\n\t\t  /* these